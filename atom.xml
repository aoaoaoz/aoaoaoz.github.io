<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>嗷嗷嗷&#39;s Blog</title>
  
  <subtitle>aoaoao&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aoudad.cn/"/>
  <updated>2019-02-11T14:11:00.132Z</updated>
  <id>http://aoudad.cn/</id>
  
  <author>
    <name>嗷嗷嗷</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CodeforceDiv2 D Flood Fill</title>
    <link href="http://aoudad.cn/2019/02/11/CodeforceDiv2-D-Flood-Fill/"/>
    <id>http://aoudad.cn/2019/02/11/CodeforceDiv2-D-Flood-Fill/</id>
    <published>2019-02-11T06:41:45.000Z</published>
    <updated>2019-02-11T14:11:00.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>You are given a line of $n$ colored squares in a row, numbered from $1$ to $n$ from left to right. The $i$-th square initially has the color $c_i$.<br>Let’s say, that two squares $i$ and $j$ belong to the same connected component if $c_i = c_j$, and $c_i = c_k$ for all $k$ satisfying $i &lt; k &lt; j$. In other words, all squares on the segment from $i$ to $j$ should have the same color.<br>For example, the line $[3, 3, 3]$ has $1$ connected component, while the line $[5, 2, 4, 4]$ has $3$ connected components.<br>The game “flood fill” is played on the given line as follows:<br>  At the start of the game you pick any starting square (this is not counted as a turn).  Then, in each game turn, change the color of the connected component containing the starting square to any other color. Find the minimum number of turns needed for the entire line to be changed into a single color.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>The first line contains a single integer  $n$  ($1\leq n\leq 5000$) — the number of squares.<br>The second line contains integers  $c_1,c_2,\dots,c_n$  ($1\leq c_i\leq 5000$) — the initial colors of the squares.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>Print a single integer — the minimum number of the turns needed.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>8<br>4 5 2 2 1 3 5 5</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>4</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>有一个n单位长度的带子，每个位置上有一种颜色，定义同种颜色的块为联通快。选取一个位置作为开始，每个回合可以将包含开始位置的联通块修改成另一种颜色，问将带子变成同一种颜色至少需要多少个回合。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>一开始看错题目了。将数组压缩一下，考虑$dp$,$dp[i][j]$为将$i$到j这一段修改成同一种颜色的答案，那么根据$a[i]$是否等于$a[j]$可以得到三种决策: 修改成和$i,j$一样颜色的，修改成和$i$一样颜色的，修改成和$j$一样颜色的。然后就做完了……</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, mid, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5007</span>;</span><br><span class="line"><span class="keyword">int</span> dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&gt;=R) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(dp[L][R]!=<span class="number">-1</span>) <span class="keyword">return</span> dp[L][R];</span><br><span class="line">    <span class="keyword">int</span> res = INFI;</span><br><span class="line">    <span class="keyword">if</span>(a[L]==a[R]) res = dfs(L+<span class="number">1</span>, R<span class="number">-1</span>) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> res = min(dfs(L+<span class="number">1</span>, R), dfs(L, R<span class="number">-1</span>))+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> dp[L][R] = res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> n;<span class="built_in">cin</span> &gt;&gt;n;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">5000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)<span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">int</span> tot=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="keyword">if</span>(a[i]!=a[i<span class="number">-1</span>])a[++tot] = a[i];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dfs(<span class="number">1</span>, tot) &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 7 1 3 2 4 1 2 3</span></span><br><span class="line"><span class="comment">// 7 5 3 5 2 4 3 4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;You are given a line of $n$ colored squares i
      
    
    </summary>
    
    
      <category term="DP" scheme="http://aoudad.cn/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>CodeforceDiv2 E Arithmetic Progression</title>
    <link href="http://aoudad.cn/2019/02/11/CodeforceDiv2-E-Arithmetic-Progression/"/>
    <id>http://aoudad.cn/2019/02/11/CodeforceDiv2-E-Arithmetic-Progression/</id>
    <published>2019-02-11T06:41:24.000Z</published>
    <updated>2019-02-11T07:27:41.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>有一个长度为n的数列，如果将这个数列排序，那么它是一个等差数列，可以进行60次询问，每次询问可以给一个下标，会返回这个位置的值，可以给一个x，会返回数组中是否有大于这个数的值。求问这个等差数列的第一项和公差。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>二分最大值，随机出任意30个位置的值，取GCD。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, mid, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"&gt; "</span> &lt;&lt; x &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span>.flush();</span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">0</span>, R = <span class="number">1e9</span>+<span class="number">1</span>, mid, ans;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;=R)</span><br><span class="line">    &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        mid = (L+R)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(chk(mid)) L = mid + <span class="number">1</span>, ans = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> R = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> seed = chrono::high_resolution_clock::now().time_since_epoch().count();</span><br><span class="line">    <span class="function">mt19937 <span class="title">Ran</span><span class="params">(seed)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">60</span>-cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> p = Ran()%n+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; p &lt;&lt; <span class="string">'\n'</span>;<span class="built_in">cout</span>.flush();</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        <span class="keyword">if</span>(x==ans)<span class="keyword">continue</span>;</span><br><span class="line">        res = (res==<span class="number">0</span>)?<span class="built_in">abs</span>(x-ans):__gcd(<span class="built_in">abs</span>(x-ans), res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; ans-(n<span class="number">-1</span>)*res &lt;&lt; <span class="string">' '</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;<span class="built_in">cout</span>.flush();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意：&quot;&gt;&lt;a href=&quot;#题意：&quot; class=&quot;headerlink&quot; title=&quot;题意：&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意：&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;有一个长度为n的数列，如果将这个数列排序，那么它是一个等差数列，可以进行60次询问，每次询问可以给
      
    
    </summary>
    
    
      <category term="交互题" scheme="http://aoudad.cn/tags/%E4%BA%A4%E4%BA%92%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>CodeforceDiv2 F Please, another Queries on Array?</title>
    <link href="http://aoudad.cn/2019/02/11/CodeforceDiv2-F-Please-another-Queries-on-Array/"/>
    <id>http://aoudad.cn/2019/02/11/CodeforceDiv2-F-Please-another-Queries-on-Array/</id>
    <published>2019-02-11T06:39:59.000Z</published>
    <updated>2019-02-11T07:05:30.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>You are given an array  $a_1,a_2,\dots,a_n$.<br>You need to perform  $q$  queries of the following two types:</p><ol><li>“MULTIPLY l r x” — for every  $i$  ($l\leq i\leq r$) multiply  $a_i$  by  $x$.</li><li>“TOTIENT l r” — print  $\phi(\Pi_{i=l}^{r}a_i)$  taken modulo  $10^9+7$, where $\phi$ denotes $Euler’s totient function$.<br>The  $Euler’s totient function$  of a positive integer  $n$  (denoted as  $\phi(n)$) is the number of integers  $x$  ($1\leq x\leq n$) such that  $gcd(n,x)=1$.</li></ol><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>The first line contains two integers  $n$  and  $q$  ($1\leq n\leq 4⋅10^5$,  $1\leq q\leq 2⋅10^5$) — the number of elements in array  $a$  and the number of queries.<br>The second line contains  $n$  integers  $a_1,a_2,\dots,a_n$  ($1\leq a_i\leq 300$) — the elements of array  $a$.<br>Then  $q$  lines follow, describing queries in the format given in the statement.</p><ol><li>“MULTIPLY l r x” ($1\leq l\leq r\leq n$,  $1\leq x\leq 300$) — denotes a multiplication query.</li><li>“TOTIENT l r” ($1\leq l\leq r\leq n$) — denotes a query on the value of Euler’s totient function.<br>It is guaranteed that there is at least one “TOTIENT” query.</li></ol><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>For each “TOTIENT” query, print the answer to it.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>4 4<br>5 9 1 2<br>TOTIENT 3 3<br>TOTIENT 3 4<br>MULTIPLY 4 4 3<br>TOTIENT 4 4</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>1<br>1<br>2</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>数据结构题，两种操作，第一种操作是对一个区间内的每个数乘以一个小于$300$的数，第二种操作是查询一个区间内所有数的乘积的欧拉函数值。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>设该区间内所有数的乘积是M，那么其实<script type="math/tex">\phi(M) = \Sigma_{M\%p==0 \&\& p 素数}\frac{p-1}{p}</script>，所以只需要预处理出300以内的素数有哪些（62个），每次维护区间内包含哪些素因子就可以了。这里有一个or-tree，也就是用long long的每个bit表示一个素因子，构建一颗线段树维护就可以了，写起来很简单。不过好像有点小卡常。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, mid, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll pro[maxn&lt;&lt;<span class="number">2</span>], lazy[maxn&lt;&lt;<span class="number">2</span>], a[maxn];</span><br><span class="line"><span class="function">ll <span class="title">q_p</span><span class="params">(ll base, ll n)</span></span>&#123;ll res=<span class="number">1</span>;<span class="keyword">for</span>(;n;n&gt;&gt;=<span class="number">1</span>, base=base*base%mod)<span class="keyword">if</span>(n&amp;<span class="number">1</span>)res= res*base%mod;<span class="keyword">return</span> res;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;pro[rt]=pro[rt&lt;&lt;<span class="number">1</span>]*pro[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lazy[rt]&gt;<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>]=lazy[rt&lt;&lt;<span class="number">1</span>]*lazy[rt]%mod;</span><br><span class="line">        lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*lazy[rt]%mod;</span><br><span class="line">        pro[rt&lt;&lt;<span class="number">1</span>]=pro[rt&lt;&lt;<span class="number">1</span>]*q_p(lazy[rt], (len+<span class="number">1</span>)/<span class="number">2</span>)%mod;</span><br><span class="line">        pro[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=pro[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*q_p(lazy[rt], len&gt;&gt;<span class="number">1</span>)%mod;</span><br><span class="line">        lazy[rt]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lazy[rt] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) &#123;pro[rt]=a[l];<span class="keyword">return</span> ;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson);build(rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;lazy[rt]=lazy[rt]*x%mod;pro[rt]=pro[rt]*q_p(x, r-l+<span class="number">1</span>)%mod;<span class="keyword">return</span>;&#125;</span><br><span class="line">    pushdown(rt, r-l+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) update(L, R, x, lson);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;R) update(L, R, x, rson);</span><br><span class="line">    pushup(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<span class="keyword">return</span> pro[rt];&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;pushdown(rt, r-l+<span class="number">1</span>);</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) res = query(L, R, lson);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;R) res = res * query(L, R, rson) % mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> Q[<span class="number">30</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; p&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>, <span class="number">19</span>, <span class="number">23</span>, <span class="number">29</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">41</span>, <span class="number">43</span>, <span class="number">47</span>, <span class="number">53</span>,</span><br><span class="line"> <span class="number">59</span>, <span class="number">61</span>, <span class="number">67</span>, <span class="number">71</span>, <span class="number">73</span>, <span class="number">79</span>, <span class="number">83</span>, <span class="number">89</span>, <span class="number">97</span>, <span class="number">101</span>, <span class="number">103</span>, <span class="number">107</span>, <span class="number">109</span>, <span class="number">113</span>, <span class="number">127</span>, <span class="number">131</span>,</span><br><span class="line"> <span class="number">137</span>, <span class="number">139</span>, <span class="number">149</span>, <span class="number">151</span>, <span class="number">157</span>, <span class="number">163</span>, <span class="number">167</span>, <span class="number">173</span>, <span class="number">179</span>, <span class="number">181</span>, <span class="number">191</span>, <span class="number">193</span>, <span class="number">197</span>, <span class="number">199</span>,</span><br><span class="line"> <span class="number">211</span>, <span class="number">223</span>, <span class="number">227</span>, <span class="number">229</span>, <span class="number">233</span>, <span class="number">239</span>, <span class="number">241</span>, <span class="number">251</span>, <span class="number">257</span>, <span class="number">263</span>, <span class="number">269</span>, <span class="number">271</span>, <span class="number">277</span>, <span class="number">281</span>, <span class="number">283</span>, <span class="number">293</span>&#125;;</span><br><span class="line">ll mark[maxn&lt;&lt;<span class="number">2</span>], st[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">403</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ppmark</span><span class="params">(<span class="keyword">int</span> rt)</span></span>&#123;mark[rt]=mark[rt&lt;&lt;<span class="number">1</span>]|mark[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pdmark</span><span class="params">(<span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(st[rt]==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    st[rt&lt;&lt;<span class="number">1</span>] |= st[rt];</span><br><span class="line">    st[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]|=st[rt];</span><br><span class="line">    mark[rt&lt;&lt;<span class="number">1</span>] |= st[rt];</span><br><span class="line">    mark[rt&lt;&lt;<span class="number">1</span>|<span class="number">1</span>] |= st[rt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updatem</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, ll M, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;st[rt]|=M;mark[rt]|=M;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;pdmark(rt);</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) updatem(L, R, M, lson);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;R) updatem(L, R, M, rson);</span><br><span class="line">    ppmark(rt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">queryor</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> rt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=l&amp;&amp;r&lt;=R)&#123;<span class="keyword">return</span> mark[rt];&#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l+r&gt;&gt;<span class="number">1</span>;pdmark(rt);</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(L&lt;=mid) res = queryor(L, R, lson);</span><br><span class="line">    <span class="keyword">if</span>(mid&lt;R) res |= queryor(L, R, rson);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> n, m;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">62</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) pos[p[i]] = i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, a+i);</span><br><span class="line">        ll M = <span class="number">0</span>, x = a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j*j&lt;=x;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(x%j==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    M |= <span class="number">1L</span>L&lt;&lt;pos[j];</span><br><span class="line">                    <span class="keyword">while</span>(x%j==<span class="number">0</span>) x/=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(x&gt;<span class="number">1</span>)M |= <span class="number">1L</span>L&lt;&lt;pos[x];</span><br><span class="line">        updatem(i, i, M, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        error(i, M, a[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    build(<span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, Q);</span><br><span class="line">        <span class="keyword">if</span>(Q[<span class="number">0</span>]==<span class="string">'T'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> L, R;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;L, &amp;R);</span><br><span class="line">            ll tmp = query(L, R, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">            ll M = queryor(L, R, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//            error(tmp, M);</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">62</span>;++j)</span><br><span class="line">                <span class="keyword">if</span>((M&gt;&gt;j)&amp;<span class="number">1</span>)</span><br><span class="line">                    tmp = tmp*(p[j]<span class="number">-1</span>)%mod*q_p(p[j], mod<span class="number">-2</span>)%mod;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Q[<span class="number">0</span>]==<span class="string">'M'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> L, R, x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;L, &amp;R, &amp;x);</span><br><span class="line">            update(L, R, x, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">            ll M = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">2</span>;j*j&lt;=x;++j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(x%j==<span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    M |= <span class="number">1L</span>L&lt;&lt;pos[j];</span><br><span class="line">                    <span class="keyword">while</span>(x%j==<span class="number">0</span>) x/=j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x&gt;<span class="number">1</span>)M |= <span class="number">1L</span>L&lt;&lt;pos[x];</span><br><span class="line">            updatem(L, R, M, <span class="number">1</span>, n, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;You are given an array  $a_1,a_2,\dots,a_n$.&lt;
      
    
    </summary>
    
    
      <category term="线段树" scheme="http://aoudad.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="数论" scheme="http://aoudad.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>Camp Day2 H Cosmic Cleaner</title>
    <link href="http://aoudad.cn/2019/02/10/Camp-Day2-H-Cosmic-Cleaner/"/>
    <id>http://aoudad.cn/2019/02/10/Camp-Day2-H-Cosmic-Cleaner/</id>
    <published>2019-02-10T13:16:11.000Z</published>
    <updated>2019-02-10T13:28:16.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>在一片小行星带里有  $n$ 颗小行星，它们在万有引力的作用下绕着一颗行星旋转。在这一刻时，它们之间不存在碰撞的情况。一位清洁工奉命前来清理这颗行星，Ta 会动用某种先进技术使这颗行星顷刻间从宇宙中消失，任何距离这颗行星的中心在一定范围内的事物都会在一瞬间被清除。假设这些天体都是完整的球体，你能计算出清除的区域里有多少体积的事物原本属于这些小行星吗？</p><p>注意，这些天体在此刻满足两两不存在交集的条件。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>输入包含多组测试数据。第一行包含一个整数  $T$，表示测试数据的组数。随后的内容是各组测试数据。对于每组测试数据：<br>第一行包含一个整数  $n$。<br>接下来的 $n$  行里，每行包含四个整数  $x, y, z$  和  $r$，表示有一颗中心位于  $(x, y, z)$、半径为 $r$  的小行星。<br>最后一行包含四个整数  $x’,y’,z’$  和  $r’$，表示行星的中心位于 $(x’,y’,z’)$，而清洁工的清理半径为  $r’$（一个大于该行星半径的值）。</p><ul><li>$1 \leq T \leq 6000$</li><li>$1 \leq n \leq 100$</li><li>$−10^3≤x,y,z,x’,y’,z’≤10^3$</li><li>$1 \leq r’ \leq 10^3$</li><li><strong>Output</strong></li></ul><hr><p>对于每组测试数据，输出一行<code>Case #x: y</code>，其中<code>x</code>是测试数据的编号（从  11  开始编号），<code>y</code>是这组数据的答案，要求相对误差或绝对误差不超过  $10^{-6}$。<br>严格来讲，如果你的答案是  $a$，而标准答案是  $b$，那么当  $\frac{|a - b|}{\max{1, |b|}} \leq 10^{-6}$  时你的答案会被认为是正确的。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>1<br>3<br>5 5 5 2<br>-6 -7 6 1<br>6 -5 0 3<br>1 -1 0 10</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>Case #1: 142.76246874761383764962</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>有$n$个小球，求这些小球被一个大球截去的总体积</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>样例很良心，由于小球两两之间不相交，所以直接单独考虑每个小球就可以了。分三种情况，第一种相离，截取的体积为0；第二种情况，内含，截取的体积为小球的总面积；第三种情况，相交，截去的面积实际上就是两个球缺，直接套一下球缺公式就可以了。<br>球体积公式<script type="math/tex">V=\frac{4}{3}\pi r^3</script><br>球缺公式:<script type="math/tex">V=\pi H^2(R-\frac{H}{3})</script><br>其中$H$表示球缺的高。<br>不过这个题目我之前的写法不知道为啥一直过不了，换种写法才过。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, mid, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson mid+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e3</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y, z;</span><br><span class="line">    Point(<span class="keyword">double</span> _x=<span class="number">0</span>, db _y=<span class="number">0</span>, db _z=<span class="number">0</span>):x(_x), y(_y), z(_z)&#123;&#125;</span><br><span class="line">    <span class="keyword">friend</span> Point <span class="keyword">operator</span>-(<span class="keyword">const</span> Point &amp;a, <span class="keyword">const</span> Point &amp;b)&#123;<span class="keyword">return</span> Point(a.x-b.x, a.y-b.y,a.z-b.z);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">double</span> <span class="title">dot</span><span class="params">(<span class="keyword">const</span> Point&amp;a, <span class="keyword">const</span> Point &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a.x*b.x+a.y*b.y+a.z*b.z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;p[maxn];</span><br><span class="line"><span class="keyword">double</span> r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">gettheta</span><span class="params">(<span class="keyword">double</span> a, db b, db c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    error((a*a+b*b-c*c)/(2*a*b));</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">acos</span>((a*a+b*b-c*c)/(<span class="number">2</span>*a*b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;<span class="keyword">if</span>(x&gt;eps)<span class="keyword">return</span> <span class="number">1</span>;<span class="keyword">if</span>(x&lt;-eps)<span class="keyword">return</span> <span class="number">-1</span>;<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> cas=<span class="number">1</span>;cas&lt;=t;++cas)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>, &amp;p[i].x, &amp;p[i].y, &amp;p[i].z, &amp;r[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        Point O;<span class="keyword">double</span> R;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf%lf"</span>, &amp;O.x, &amp;O.y, &amp;O.z, &amp;R);</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">double</span> L = <span class="built_in">sqrt</span>(dot(O-p[i],O-p[i]));</span><br><span class="line">            <span class="keyword">double</span> a = r[i], b = R;</span><br><span class="line">            <span class="keyword">if</span>(sgn(L-a-b)&gt;=<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(sgn(b-a-L)&gt;=<span class="number">0</span>) &#123;res+=PI*<span class="number">4</span>/<span class="number">3</span>*a*a*a;<span class="keyword">continue</span>;&#125;</span><br><span class="line">            <span class="keyword">double</span> L1 = (a*a+L*L-b*b)/(<span class="number">2</span>*L);</span><br><span class="line">            <span class="keyword">double</span> H1 = a-L1, H2 = b-(L-L1);</span><br><span class="line">            res += PI*H1*H1*(a-H1/<span class="number">3</span>);</span><br><span class="line">            res += PI*H2*H2*(b-H2/<span class="number">3</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: %.12f\n"</span>, cas, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在一片小行星带里有  $n$ 颗小行星，它们在万有引力的作用下绕着一颗行星旋转。在这一刻时
      
    
    </summary>
    
    
      <category term="DP" scheme="http://aoudad.cn/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1110 E Magic Stones</title>
    <link href="http://aoudad.cn/2019/02/08/Codeforces-1110-E/"/>
    <id>http://aoudad.cn/2019/02/08/Codeforces-1110-E/</id>
    <published>2019-02-07T17:02:28.000Z</published>
    <updated>2019-02-07T17:22:53.630Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>Grigory has $n$ magic stones, conveniently numbered from $1$ to $n$. The charge of the $i$-th stone is equal to $c_i$.<br>Sometimes Grigory gets bored and selects some inner stone (that is, some stone with index $i$, where $2 \le i \le n - 1$), and after that synchronizes it with neighboring stones. After that, the chosen stone loses its own charge, but acquires the charges from neighboring stones. In other words, its charge $c_i$ changes to $c_i’ = c_{i + 1} + c_{i - 1} - c_i$.<br>Andrew, Grigory’s friend, also has $n$ stones with charges $t_i$. Grigory is curious, whether there exists a sequence of zero or more synchronization operations, which transforms charges of Grigory’s stones into charges of corresponding Andrew’s stones, that is, changes $c_i$ into $t_i$ for all $i$?</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>The first line contains one integer $n$ ($2\leq n\leq 10^5$) — the number of magic stones.<br>The second line contains integers $c_1,c_2,\dots,c_n$ ($0\leq c_i\leq 2⋅10^9$) — the charges of Grigory’s stones.<br>The second line contains integers $t_1,t_2,\dots,t_n$ ($0\leq t_i\leq 2⋅10^9$) — the charges of Andrew’s stones.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>If there exists a (possibly empty) sequence of synchronization operations, which changes all charges to the required ones, print “Yes”.<br>Otherwise, print “No”.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>4<br>7 2 4 12<br>7 15 10 12</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>Yes</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>3<br>4 4 4<br>1 2 3</p><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>No</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>对于一个长度为$n$的数组$c$，对每个$2\leq i \leq n-1$，可以把$c[i]$替换成$c[i+1]+c[i-1]-c[i]$，可以对某个位置多次替换，问是否存在某种操作顺序可以把$c$换成数组$t$</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>考虑连续的三个数字$a,b,c$, 对$b$进行操作，得到$a, a+c-b, c$差分数组变为$c-b$, $b-a$，也就是说每次操作就是在交换差分数组里的相邻元素，所以只需要判断一下头尾和差分数组是否一致就可以了。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line">ll c[maxn], t[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line"><span class="comment">//    freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">cin</span> &gt;&gt; t[i];</span><br><span class="line">    <span class="keyword">if</span>(c[<span class="number">1</span>]!=t[<span class="number">1</span>]||c[n]!=t[n])&#123;<span class="built_in">puts</span>(<span class="string">"No"</span>);<span class="keyword">return</span> <span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;<span class="number">1</span>;--i) c[i]-=c[i<span class="number">-1</span>], t[i]-=t[i<span class="number">-1</span>];</span><br><span class="line">    sort(c+<span class="number">1</span>, c+<span class="number">1</span>+n);</span><br><span class="line">    sort(t+<span class="number">1</span>, t+<span class="number">1</span>+n);</span><br><span class="line">    <span class="keyword">int</span> ok=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">        ok &amp;= (c[i]==t[i]);</span><br><span class="line">    <span class="built_in">puts</span>(ok?<span class="string">"Yes"</span>:<span class="string">"No"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Grigory has $n$ magic stones, conveniently nu
      
    
    </summary>
    
    
      <category term="差分" scheme="http://aoudad.cn/tags/%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces 1110 D</title>
    <link href="http://aoudad.cn/2019/02/08/Codeforces-1110-D/"/>
    <id>http://aoudad.cn/2019/02/08/Codeforces-1110-D/</id>
    <published>2019-02-07T16:37:40.000Z</published>
    <updated>2019-02-07T17:01:50.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>You are playing a game of Jongmah. You don’t need to know the rules to solve this problem. You have $n$ tiles in your hand. Each tile has an integer between $1$ and $m$ written on it.<br>To win the game, you will need to form some number of triples. Each triple consists of three tiles, such that the numbers written on the tiles are either all the same or consecutive. For example, $7, 7, 7$ is a valid triple, and so is $12, 13, 14$, but $2,2,3$ or $2,4,6$ are not. You can only use the tiles in your hand to form triples. Each tile can be used in at most one triple.<br>To determine how close you are to the win, you want to know the maximum number of triples you can form from the tiles in your hand.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>The first line contains two integers integer  $n$  and  $m$($1\leq n,m\leq 10^6$) — the number of tiles in your hand and the number of tiles types.<br>The second line contains integers  $a_1,a_2,\dots,a_n$  ($1\leq a_i\leq m$), where  $a_i$ denotes the number written on the  $i$-th tile.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>Print one integer: the maximum number of triples you can form.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>10 6<br>2 3 3 3 4 4 4 5 5 6</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>3</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>12 6<br>1 5 3 3 3 4 3 5 3 2 3 3</p><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>3</p><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>13 5<br>1 1 5 1 2 3 3 2 4 2 3 4 5</p><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>4</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>给一个$cnt$数组，数组大小为$m$，每次可以选择连续的三个位置且这些位置上的数字都大于$0$，分别对他们的值$-1$，或者选择一个位置$-3$，求最多可以做多少次这样的操作。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>定义$dp[i][j][k]$表示考虑前i个位置，第$i-2$个位置往后取j次连续$3$个的，$i-1$个位置往后取$k$次连续$3$个的答案。则对于第$i$个位置，枚举这个位置往后取$x$次$3$个的，显然，对于$x\geq3$的情况，可以把$x$模$3$，当当前位置上的值足够大（$\geq j+k+x$）的时候，这个枚举是合法的，那么这时候状态转移方程就是<script type="math/tex">dp[i][k][x] = max(dp[i-1][j][k] + x + (cnt[i]-j-k-x)/3)</script>答案就是$dp[m][0][0]$，因为只需要用到$i-1$的信息，所以可以滚动数组优化一下空间</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e6</span>+<span class="number">7</span>;</span><br><span class="line">ll dp[<span class="number">2</span>][<span class="number">4</span>][<span class="number">4</span>], cnt[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line"><span class="comment">//    freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//</span></span></span><br><span class="line">    ll n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">        cnt[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        t = t^<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(dp[t], <span class="number">0</span>, <span class="keyword">sizeof</span> dp[t]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;++j)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">3</span>;++k)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;<span class="number">3</span>;++x)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(j+k+x&gt;cnt[i])<span class="keyword">continue</span>;</span><br><span class="line">                    dp[t][k][x] = max(dp[t][k][x], dp[t^<span class="number">1</span>][j][k] + x + (cnt[i]-j-k-x)/<span class="number">3</span>);</span><br><span class="line">                &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[t][<span class="number">0</span>][<span class="number">0</span>]&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">12 6</span></span><br><span class="line"><span class="comment">1 1 1 2 3 3 4 4 4 5 5 6</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;You are playing a game of Jongmah. You don’t 
      
    
    </summary>
    
    
      <category term="DP" scheme="http://aoudad.cn/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces1111D2 E</title>
    <link href="http://aoudad.cn/2019/02/06/Codeforces1111D2-E/"/>
    <id>http://aoudad.cn/2019/02/06/Codeforces1111D2-E/</id>
    <published>2019-02-06T08:00:49.000Z</published>
    <updated>2019-02-06T14:18:46.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>You are given a tree with $n$ nodes and $q$ queries.<br>Every query starts with three integers $k$, $m$ and $r$, followed by $k$ nodes of the tree $a_1, a_2, \ldots, a_k$. To answer a query, assume that the tree is rooted at $r$. We want to divide the $k$ given nodes into at most $m$ groups such that the following conditions are met:<br>  Each node should be in exactly one group and each group should have at least one node.  In any group, there should be no two distinct nodes such that one node is an ancestor (direct or indirect) of the other. You need to output the number of ways modulo $10^{9}+7$ for every query.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>The first line contains two integers  $n$  and  $q$  ($1\leq n,q\leq 10^5$) — the number of vertices in the tree and the number of queries, respectively.<br>Each of the next  $n−1$  lines contains two integers  $u$  and  $v$($1\leq u,v\leq n,u\not=v$), denoting an edge connecting vertex $u$  and vertex  $v$. It is guaranteed that the given graph is a tree.<br>Each of the next  $q$ lines starts with three integers  $k$,  $m$  and  $r$  ($1\leq k,r\leq n$,  $1\leq m\leq \min(300,k)$) — the number of nodes, the maximum number of groups and the root of the tree for the current query, respectively. They are followed by  $k$  distinct integers  $a_1,a_2,\dots,a_k$  ($1\leq ai\leq n$), denoting the nodes of the current query.<br>It is guaranteed that the sum of  $k$  over all queries does not exceed  $10^5$.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>Print $q$ lines, where the $i$-th line contains the answer to the $i$-th query.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>7 2<br>5 4<br>2 6<br>5 3<br>1 2<br>7 5<br>4 6<br>3 3 2 7 4 3<br>3 1 4 6 2 1</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>2<br>0</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>7 2<br>4 7<br>2 5<br>4 1<br>5 1<br>5 6<br>4 3<br>3 3 2 7 1 4<br>2 1 6 3 2</p><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>1<br>1</p><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>5 2<br>3 5<br>4 5<br>4 2<br>1 4<br>2 2 3 1 2<br>2 2 4 5 4</p><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>2<br>1</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>给一棵无根树，节点数小于$10^5$，q次询问，每次询问给k个点和一个根r，将这k个节点分为不多于m组，使得每个节点不与他们的祖先节点在同一组，求方案数。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>这道题感觉好多trick，可能是太久没训练的原因，有点迟钝。一直wa6，因为数组开小了2333。以后再出现数组开小了这种问题就打自己一耳光。<br>先是考虑比较简单的情况，固定根节点，设$h_i$表示节点集中i节点的祖先节点数量，按$h[i]$从小到大将节点进行排序，考虑dp，设$dp[i][j]$表示前i个节点组成j组的方案数，那么这就没有后效性了，可以推出状态转移方程为<script type="math/tex">dp[i][j] = dp[i-1][j-1] + dp[i-1][j]*(j-h[i])</script>所以<script type="math/tex">ans=\Sigma_{j=1}^mdp[k][j]</script><br>问题的关键就变成了怎么求$h[i]$，实际上$h[i]$就是从节点i到根节点这条简单路径上的在节点集中出现的数量。那我们就能用打标记的方法，给节点集打上标记，那$h[i]$就是一个前缀和。那么怎么维护这个东西呢，显然我们要用树状数组，另外还用到了一个很强大的东西，括号序列，这东西就像dfs序一样强大。括号序列就是dfs树的时候给每个节点记录一个进栈和出栈的值，获得的序列。给每个节点的(进栈序号)打上+1，(出栈序号+1)打上-1，那么每次查询树状数组的时候就是$h[i]+1$了。<br>现在考虑不同根的情况，实际上这里上面的dp还是对的，而$h[i]$表示的是i到r这两个节点间的关键节点的数量。那么就是一个树上差分就解决了<script type="math/tex">h[i] = Sum(inq[i])+Sum(inq[r])-2*Sum(inq[LCA(i, r)])+[LCA是关键节点]-1</script><br>总复杂度是$O(n*logn)$。需要注意的有：</p><ol><li>数组要开双倍大小，因为括号序列是双倍长的QwQ。</li><li>这里dp的时候只会用到上一层的信息，所以可以滚动数组优化一下。</li><li>求完数组h之后可以反着打一下标记，这样就能抵消了。</li><li>注意取模QwQ。</li></ol><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> st[maxn], en[maxn], tot;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> DEG = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn][DEG], dep[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> ff)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p[u][<span class="number">0</span>] = ff;</span><br><span class="line">    dep[u] = dep[ff] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ff)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;DEG;++i)</span><br><span class="line">            p[u][i] = p[p[u][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    st[u] = ++tot;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[u].size();++i)</span><br><span class="line">        <span class="keyword">if</span>(G[u][i]!=ff)</span><br><span class="line">            dfs(G[u][i], u);</span><br><span class="line">    en[u] = ++tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> h[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;<span class="keyword">return</span> h[x]&lt;h[y];&#125;</span><br><span class="line"><span class="keyword">int</span> Q[maxn];</span><br><span class="line"><span class="keyword">int</span> bit[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=p;i&lt;=<span class="number">2</span>*n;i+=(i&amp;-i)) bit[i]+=x;&#125;</span><br><span class="line"><span class="function">ll <span class="title">Sum</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;<span class="keyword">if</span>(p==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;ll res = <span class="number">0</span>;<span class="keyword">for</span>(<span class="keyword">int</span> i=p;i&gt;<span class="number">0</span>;i-=(i&amp;-i))res+=bit[i];<span class="keyword">return</span> res;&#125;</span><br><span class="line">ll dp[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[u]&gt;dep[v])swap(u, v);</span><br><span class="line">    <span class="keyword">int</span> tmp = dep[v] - dep[u];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;tmp;i++,tmp&gt;&gt;=<span class="number">1</span>)<span class="keyword">if</span>(tmp&amp;<span class="number">1</span>)v = p[v][i];</span><br><span class="line">    <span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=DEG<span class="number">-1</span>;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">        <span class="keyword">if</span>(p[u][i]!=p[v][i])</span><br><span class="line">            u = p[u][i], v=p[v][i];</span><br><span class="line">    <span class="keyword">return</span> p[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line"><span class="comment">//    freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> q;tot=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;q);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        G[u].eb(v);G[v].eb(u);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> k, m, r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;k, &amp;m, &amp;r);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, Q+j);</span><br><span class="line">            add(st[Q[j]], <span class="number">1</span>);</span><br><span class="line">            add(en[Q[j]]+<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">            vis[Q[j]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> lca = LCA(Q[j], r);</span><br><span class="line">            h[j] = Sum(st[Q[j]]) + Sum(st[r]) - <span class="number">2</span> * Sum(st[lca]) + vis[lca] - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i)  dp[i]=<span class="number">0</span>;dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=k;++j) add(st[Q[j]], <span class="number">-1</span>), add(en[Q[j]], <span class="number">1</span>), vis[Q[j]] = <span class="number">0</span>;</span><br><span class="line">        sort(h+<span class="number">1</span>, h+<span class="number">1</span>+k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=<span class="number">0</span>;--j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(j&gt;=h[i])</span><br><span class="line">                    dp[j] = (dp[j<span class="number">-1</span>] + <span class="number">1L</span>L*dp[j] * (j-h[i])%mod+mod)%mod;</span><br><span class="line">                <span class="keyword">else</span> dp[j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        ll res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i) &#123;res += dp[i]; res%=mod;&#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (res+mod)%mod &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;You are given a tree with $n$ nodes and $q$ q
      
    
    </summary>
    
    
      <category term="DP" scheme="http://aoudad.cn/tags/DP/"/>
    
      <category term="括号序列" scheme="http://aoudad.cn/tags/%E6%8B%AC%E5%8F%B7%E5%BA%8F%E5%88%97/"/>
    
      <category term="LCA" scheme="http://aoudad.cn/tags/LCA/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces1111D2 D</title>
    <link href="http://aoudad.cn/2019/02/06/Codeforces1111D2-D/"/>
    <id>http://aoudad.cn/2019/02/06/Codeforces1111D2-D/</id>
    <published>2019-02-06T08:00:35.000Z</published>
    <updated>2019-02-06T08:52:08.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>There is a colony of villains with several holes aligned in a row, where each hole contains exactly one villain.<br>Each colony arrangement can be expressed as a string of even length, where the <script type="math/tex">i</script>-th character of the string represents the type of villain in the <script type="math/tex">i</script>-th hole.<br>Iron Man can destroy a colony only if the colony arrangement is such that all villains of a certain type either live in the first half of the colony or in the second half of the colony.<br>His assistant Jarvis has a special power. It can swap villains of any two holes, i.e. swap any two characters in the string; he can do this operation any number of times.<br>Now Iron Man asks Jarvis <script type="math/tex">q</script> questions. In each question, he gives Jarvis two numbers <script type="math/tex">x</script> and <script type="math/tex">y</script>. Jarvis has to tell Iron Man the number of distinct colony arrangements he can create from the original one using his powers such that all villains having the same type as those originally living in <script type="math/tex">x</script>-th hole or <script type="math/tex">y</script>-th hole live in the same half and the Iron Man can destroy that colony arrangement.<br>Two colony arrangements are considered to be different if there exists a hole such that different types of villains are present in that hole in the arrangements.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>The first line contains a string  $s$ ($2 \leq |s|\leq 10^5$), representing the initial colony arrangement. String  $s$  can have both lowercase and uppercase English letters and its length is  even.<br>The second line contains a single integer  qq  ($1\leq q \leq 10^5$) — the number of questions.<br>The  $i$-th of the next  $q$  lines contains two integers  $xi$  and  $yi$($1\leq xi,yi\leq |s|$,  $xi\not=yi$) — the two numbers given to the Jarvis for the  $i$-th question.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>For each question output the number of arrangements possible modulo $10^9+7$.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>abba<br>2<br>1 4<br>1 2</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>2<br>0</p><h2 id="Sample-Input-1"><a href="#Sample-Input-1" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>AAaa<br>2<br>1 2<br>1 3</p><h2 id="Sample-Output-1"><a href="#Sample-Output-1" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>2<br>0</p><h2 id="Sample-Input-2"><a href="#Sample-Input-2" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>abcd<br>1<br>1 3</p><h2 id="Sample-Output-2"><a href="#Sample-Output-2" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>8</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>给一个只由大写字母和小写字母52种字符组成的字符串，字符串长度一定为偶数，q次询问，定义一个串是合法的，当且仅当同样字母的在同一半。q次询问，每次询问给两个位置，求两个位置上的字符在同一半的方案数。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>不考虑询问的话，答案就是从52个数中选出一个子集使得子集和为n/2的方案数。这是个经典的01背包问题。考虑原题，实际上就是从剩下的那些字母中选出一个子集使得子集和为n/2的方案数<em>2，如果直接枚举两个字母预处理做01背包是$O(n</em>52^3)$，GG，这里可以用可逆背包，就是$O(n*52^2)$，当然其实常数不会那么大。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">57</span>;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ch&lt;=<span class="string">'z'</span>&amp;&amp;ch&gt;=<span class="string">'a'</span>) <span class="keyword">return</span> ch-<span class="string">'a'</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ch&lt;=<span class="string">'Z'</span>&amp;&amp;ch&gt;=<span class="string">'A'</span>) <span class="keyword">return</span> ch-<span class="string">'A'</span>+<span class="number">27</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxL = <span class="number">1e5</span>+<span class="number">8</span>;</span><br><span class="line">ll ans[maxn][maxn], f[maxL], cnt[maxn];</span><br><span class="line">ll fac[maxL], finv[maxL], tmp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">q_p</span><span class="params">(ll base, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;n;n&gt;&gt;=<span class="number">1</span>, base=base*base%mod)<span class="keyword">if</span>(n&amp;<span class="number">1</span>)ans=ans*base%mod;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line"><span class="comment">//    freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;s;<span class="keyword">int</span> n = (<span class="keyword">int</span>)s.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) ++cnt[id(s[i])];</span><br><span class="line">    fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;fac[i] = fac[i<span class="number">-1</span>] * i % mod; <span class="keyword">if</span>(i&lt;=n/<span class="number">2</span>) res = res * i % mod;&#125;</span><br><span class="line">    finv[n] = q_p(fac[n], mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i) finv[i] = finv[i+<span class="number">1</span>] * (i+<span class="number">1</span>) % mod;finv[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    res = res * res % mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">52</span>;++i) res = res * finv[cnt[i]] % mod;</span><br><span class="line">    f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">52</span>;++i)</span><br><span class="line">        <span class="keyword">if</span>(cnt[i])</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=n;j&gt;=cnt[i];--j)</span><br><span class="line">                f[j] = (f[j] + f[j-cnt[i]])%mod;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">52</span>;++i) ans[i][i] = f[n/<span class="number">2</span>] * res % mod;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">52</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[i]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;++i) tmp[i] = f[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=cnt[i];j&lt;=n;++j) tmp[j] = (mod+tmp[j] - tmp[j-cnt[i]])%mod;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=<span class="number">52</span>;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt[j]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> t=cnt[j];t&lt;=n;++t)tmp[t] = (tmp[t] - tmp[t-cnt[j]]+mod)%mod;</span><br><span class="line">            ans[i][j] = tmp[n/<span class="number">2</span>]*<span class="number">2</span>*res%mod;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> t=n;t&gt;=cnt[j];--t) tmp[t] = (tmp[t] + tmp[t-cnt[j]] + mod ) % mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> q, x, y;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=q;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        x = id(s[x<span class="number">-1</span>]), y=id(s[y<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(x&gt;y)swap(x, y);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans[x][y]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;There is a colony of villains with several ho
      
    
    </summary>
    
    
      <category term="DP" scheme="http://aoudad.cn/tags/DP/"/>
    
      <category term="背包" scheme="http://aoudad.cn/tags/%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>NTT模板</title>
    <link href="http://aoudad.cn/2019/02/03/NTT%E6%A8%A1%E6%9D%BF/"/>
    <id>http://aoudad.cn/2019/02/03/NTT模板/</id>
    <published>2019-02-02T17:03:34.000Z</published>
    <updated>2019-02-03T14:36:56.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a><strong>描述</strong></h2><p>NTT和分治NTT模板，修改一下FFT模板就可以得到了。<br>一些素数<br>r⋅2k+1    r    k    g<br>3    1    1    2<br>5    1    2    2<br>17    1    4    3<br>97    3    5    5<br>193    3    6    5<br>257    1    8    3<br>7681    15    9    17<br>12289    3    12    11<br>40961    5    13    3<br>65537    1    16    3<br>786433    3    18    10<br>5767169    11    19    3<br>7340033    7    20    3<br>23068673    11    21    3<br>104857601    25    22    3<br>167772161    5    25    3<br>469762049    7    26    3<br>998244353    119    23    3<br>1004535809    479    21    3<br>2013265921    15    27    31<br>2281701377    17    27    3<br>3221225473    3    30    5<br>75161927681    35    31    3<br>77309411329    9    33    7<br>206158430209    3    36    22<br>2061584302081    15    37    7<br>2748779069441    5    39    3<br>6597069766657    3    41    5<br>39582418599937    9    42    5<br>79164837199873    9    43    5<br>263882790666241    15    44    7<br>1231453023109121    35    45    3<br>1337006139375617    19    46    3<br>3799912185593857    27    47    5<br>4222124650659841    15    48    19<br>7881299347898369    7    50    6<br>31525197391593473    7    52    3<br>180143985094819841    5    55    6<br>1945555039024054273    27    56    5<br>4179340454199820289    29    57    3</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> g = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll <span class="title">q_p</span><span class="params">(ll base, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans = ans * base % mod;</span><br><span class="line">        base = base* base %mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll y[], <span class="keyword">int</span> len, <span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit = suf_zero(len)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) rev[i] = (rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) <span class="keyword">if</span>(i&lt;rev[i]) swap(y[i], y[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">2</span>;h&lt;=len;h&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll wn = q_p(g, (mod<span class="number">-1</span>)/h);</span><br><span class="line">        <span class="keyword">if</span>(on==<span class="number">-1</span>) wn = q_p(wn, mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j+=h)</span><br><span class="line">        &#123;</span><br><span class="line">            ll w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;j+h/<span class="number">2</span>;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                ll u = y[k], t = w*y[k+h/<span class="number">2</span>]%mod;</span><br><span class="line">                y[k] = (u+t)%mod;</span><br><span class="line">                y[k+h/<span class="number">2</span>] = (u-t+mod+mod)%mod;</span><br><span class="line">                w = w*wn%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on==<span class="number">-1</span>)&#123;ll t=q_p(len, mod<span class="number">-2</span>);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) y[i]=y[i]*t%mod;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc</span><span class="params">(ll *a,ll *b,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">NTT(a,n,<span class="number">1</span>);NTT(b,n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n;i++)a[i]=(a[i]*b[i])%mod;</span><br><span class="line">NTT(a,n,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ll x[maxn];</span><br><span class="line">ll cnt[maxn], d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> st[maxn];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line">LL A[maxn],B[maxn];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>,st); <span class="keyword">int</span> len=<span class="built_in">strlen</span>(st); n=len;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len<span class="number">-1</span>;i++) A[len<span class="number">-1</span>-i]=st[i]-<span class="string">'0'</span>;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%s"</span>,st); len=<span class="built_in">strlen</span>(st); n=max(n,len);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=len<span class="number">-1</span>;i++) B[len<span class="number">-1</span>-i]=st[i]-<span class="string">'0'</span>;</span><br><span class="line">  <span class="keyword">int</span> _n=<span class="number">1</span>; <span class="keyword">while</span>(_n&lt;n) _n&lt;&lt;=<span class="number">1</span>; n=_n; n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">  calc(A, B, n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=n<span class="number">-1</span>;i++) A[i+<span class="number">1</span>]+=A[i]/<span class="number">10</span>, A[i]%=<span class="number">10</span>;</span><br><span class="line">  n--;</span><br><span class="line">  <span class="keyword">while</span>(A[n]/<span class="number">10</span>) A[n+<span class="number">1</span>]+=A[n]/<span class="number">10</span>, A[n++]%=<span class="number">10</span>;</span><br><span class="line">  <span class="keyword">while</span>(!A[n]&amp;&amp;n&gt;<span class="number">0</span>) n--;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">0</span>;i--) <span class="built_in">putchar</span>(<span class="string">'0'</span>+A[i]);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分治NTT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">8e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> _g = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll <span class="title">q_p</span><span class="params">(ll base, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans = ans * base % mod;</span><br><span class="line">        base = base* base %mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll y[], <span class="keyword">int</span> len, <span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit = suf_zero(len)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) rev[i] = (rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) <span class="keyword">if</span>(i&lt;rev[i]) swap(y[i], y[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">2</span>;h&lt;=len;h&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll wn = q_p(_g, (mod<span class="number">-1</span>)/h);</span><br><span class="line">        <span class="keyword">if</span>(on==<span class="number">-1</span>) wn = q_p(wn, mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j+=h)</span><br><span class="line">        &#123;</span><br><span class="line">            ll w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;j+h/<span class="number">2</span>;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                ll u = y[k], t = w*y[k+h/<span class="number">2</span>]%mod;</span><br><span class="line">                y[k] = (u+t)%mod;</span><br><span class="line">                y[k+h/<span class="number">2</span>] = (u-t+mod+mod)%mod;</span><br><span class="line">                w = w*wn%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on==<span class="number">-1</span>)&#123;ll t=q_p(len, mod<span class="number">-2</span>);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) y[i]=y[i]*t%mod;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Calc</span><span class="params">(ll *A, ll *B, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NTT(A, len, <span class="number">1</span>);NTT(B, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) A[i] = A[i] * B[i] % mod;</span><br><span class="line">    NTT(A, len, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ll f[maxn], g[maxn], A[maxn], B[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cdqNTT</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    cdqNTT(l, mid);</span><br><span class="line">    <span class="keyword">int</span> SZ = r-l+<span class="number">1</span>, len=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(len&lt;SZ*<span class="number">2</span>)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mid-l+<span class="number">1</span>;++i) A[i] = f[i+l];<span class="keyword">for</span>(<span class="keyword">int</span> i=mid-l+<span class="number">1</span>;i&lt;len;++i) A[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ<span class="number">-1</span>;++i) B[i] = g[i+<span class="number">1</span>]; <span class="keyword">for</span>(<span class="keyword">int</span> i=SZ<span class="number">-1</span>;i&lt;len;++i) B[i] = <span class="number">0</span>;</span><br><span class="line">    Calc(A, B, len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;++i) f[i] = (f[i] + A[i-l<span class="number">-1</span>])%mod;</span><br><span class="line"></span><br><span class="line">    cdqNTT(mid+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line"><span class="comment">//    freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i) <span class="built_in">cin</span> &gt;&gt; g[i];</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;<span class="keyword">while</span>(len&lt;n)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    cdqNTT(<span class="number">0</span>, len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">cout</span> &lt;&lt; f[i] &lt;&lt; <span class="string">' '</span> ;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******</span></span><br><span class="line"><span class="comment"> *真·NTT</span></span><br><span class="line"><span class="comment"> *$Calc f(i) = \Sigma_&#123;j=0&#125;^&#123;i-1&#125; f(j)*f(i-j-1)$</span></span><br><span class="line"><span class="comment"> *******/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">8e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> _g = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll <span class="title">q_p</span><span class="params">(ll base, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans = ans * base % mod;</span><br><span class="line">        base = base* base %mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll y[], <span class="keyword">int</span> len, <span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit = suf_zero(len)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) rev[i] = (rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) <span class="keyword">if</span>(i&lt;rev[i]) swap(y[i], y[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">2</span>;h&lt;=len;h&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll wn = q_p(_g, (mod<span class="number">-1</span>)/h);</span><br><span class="line">        <span class="keyword">if</span>(on==<span class="number">-1</span>) wn = q_p(wn, mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j+=h)</span><br><span class="line">        &#123;</span><br><span class="line">            ll w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;j+h/<span class="number">2</span>;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                ll u = y[k], t = w*y[k+h/<span class="number">2</span>]%mod;</span><br><span class="line">                y[k] = (u+t)%mod;</span><br><span class="line">                y[k+h/<span class="number">2</span>] = (u-t+mod+mod)%mod;</span><br><span class="line">                w = w*wn%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on==<span class="number">-1</span>)&#123;ll t=q_p(len, mod<span class="number">-2</span>);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) y[i]=y[i]*t%mod;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Calc</span><span class="params">(ll *A, ll *B, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NTT(A, len, <span class="number">1</span>);NTT(B, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) A[i] = A[i] * B[i] % mod;</span><br><span class="line">    NTT(A, len, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RcdqNTT</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    RcdqNTT(l, mid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(r-l&lt;l)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> SZ = mid-l+<span class="number">1</span>+r-l+<span class="number">1</span>, len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(len&lt;SZ) len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) A[i]=B[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=mid-l;++i) A[i] = f[i+l];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=r-l;++i) B[i] = f[i];</span><br><span class="line">        Calc(A, B, len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = (f[i]+<span class="number">2</span>*A[i-l<span class="number">-1</span>])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> SZ = mid-l+<span class="number">1</span>, len=<span class="number">1</span>;<span class="keyword">while</span>(len&lt;SZ*<span class="number">2</span>)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) A[i]=B[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ;++i) A[i]=B[i]=f[i+l];</span><br><span class="line">    Calc(A, B, len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=l+l)</span><br><span class="line">            f[i] = (f[i]+A[i-l-l<span class="number">-1</span>])%mod;</span><br><span class="line"></span><br><span class="line">    RcdqNTT(mid+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line"><span class="comment">//    freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/// 对拍</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;++j)</span><br><span class="line">            f[i] += f[j]*f[i-j<span class="number">-1</span>];</span><br><span class="line">        f[i]%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">cout</span> &lt;&lt; f[i] &lt;&lt; <span class="string">' '</span> ;<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) f[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;<span class="keyword">while</span>(len&lt;n)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    RcdqNTT(<span class="number">0</span>, len<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">cout</span> &lt;&lt; f[i] &lt;&lt; <span class="string">' '</span> ;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;NTT和分治NTT模板，修改一下FFT模板就可以得到了。&lt;br&gt;一些素数&lt;br&gt;r⋅2k+1    r  
      
    
    </summary>
    
    
      <category term="分治NTT" scheme="http://aoudad.cn/tags/%E5%88%86%E6%B2%BBNTT/"/>
    
      <category term="NTT" scheme="http://aoudad.cn/tags/NTT/"/>
    
  </entry>
  
  <entry>
    <title>HDU 4609 3-idiots</title>
    <link href="http://aoudad.cn/2019/02/02/HDU-4609-3-idiots/"/>
    <id>http://aoudad.cn/2019/02/02/HDU-4609-3-idiots/</id>
    <published>2019-02-02T15:31:38.000Z</published>
    <updated>2019-02-02T15:48:04.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>King OMeGa catched three men who had been streaking in the street. Looking as idiots though, the three men insisted that it was a kind of performance art, and begged the king to free them. Out of hatred to the real idiots, the king wanted to check if they were lying. The three men were sent to the king’s forest, and each of them was asked to pick a branch one after another. If the three branches they bring back can form a triangle, their math ability would save them. Otherwise, they would be sent into jail.<br>However, the three men were exactly idiots, and what they would do is only to pick the branches randomly. Certainly, they couldn’t pick the same branch - but the one with the same length as another is available. Given the lengths of all branches in the forest, determine the probability that they would be saved. </p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>An integer T(T≤100) will exist in the first line of input, indicating the number of test cases.<br>Each test case begins with the number of branches N(3≤N≤10 5).<br>The following line contains N integers a_i (1≤a_i≤10 5), which denotes the length of each branch, respectively. </p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>Output the probability that their branches can form a triangle, in accuracy of 7 decimal places.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>2<br>4<br>1 3 3 4<br>4<br>2 3 3 4</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>0.5000000<br>1.0000000</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>有n根长度小于$10^5$的木棍，从中任选三根，能组成三角形的概率。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>FFT经典题目。设$ans$为从中选出三根能组成三角形的方案数，tot为总方案数，显然tot为$\binom n 3$。关键是求$ans$。设cnt[j]表示丛中任选两个木棍，长度之和为j的方案数，枚举木棍i，假设目前枚举到的是i，把d[i]当成选到的木棍中最长的，这样就不会重了，那么要算的就是选取两根长度小于d[i]的木棍，且他们的长度之和大于d[i]的方案数，也就是$\Sigma_{j=i+1}^{len}cnt[j]-$选两根大于d[i]的方案数，一根大一根小的方案数，一根自己一根其他的方案数。cnt可以通过把长度当作指数(下标)，数量当作系数，作一次FFT得到。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Complex(<span class="keyword">double</span> _x=<span class="number">0</span>, <span class="keyword">double</span> _y=<span class="number">0</span>):x(_x), y(_y)&#123;&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>-(<span class="keyword">const</span> Complex&amp;b)&#123;<span class="keyword">return</span> Complex(x-b.x,y-b.y);&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex&amp;b)&#123;<span class="keyword">return</span> Complex(x+b.x,y+b.y);&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>*(<span class="keyword">const</span> Complex&amp;b)&#123;<span class="keyword">return</span> Complex(x*b.x-y*b.y, x*b.y+y*b.x);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(Complex y[], <span class="keyword">int</span> len, <span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit = suf_zero(len)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) rev[i] = (rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) <span class="keyword">if</span>(i&lt;rev[i]) swap(y[i], y[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">2</span>;h&lt;=len;h&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Complex wn(cos(-on*2*PI/h), sin(-on*2*PI/h));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j+=h)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">Complex <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;j+h/<span class="number">2</span>;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                Complex u = y[k], t = w*y[k+h/<span class="number">2</span>];</span><br><span class="line">                y[k] = u+t;</span><br><span class="line">                y[k+h/<span class="number">2</span>] = u-t;</span><br><span class="line">                w = w*wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on==<span class="number">-1</span>)<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) y[i].x/=len;</span><br><span class="line">&#125;</span><br><span class="line">Complex x[maxn];</span><br><span class="line">ll cnt[maxn], d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line"><span class="comment">//    freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> cnt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, d+i), cnt[d[i]]++;</span><br><span class="line">        sort(d, d+n);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">1</span>, len1 = d[n<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(len&lt;len1*<span class="number">2</span>)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;++i)</span><br><span class="line">            x[i] = Complex(cnt[i], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len1;i&lt;len;++i)</span><br><span class="line">            x[i] = Complex(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        fft(x, len, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">            x[i] = x[i]*x[i];</span><br><span class="line">        fft(x, len, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">            cnt[i] = (ll)(x[i].x+<span class="number">0.5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">            cnt[d[i]+d[i]]--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">            cnt[i]/=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) cnt[i]+=cnt[i<span class="number">-1</span>];</span><br><span class="line">        ll ans = <span class="number">0</span>, tot = <span class="number">1L</span>L*(n<span class="number">-2</span>)*(n<span class="number">-1</span>)*n/<span class="number">6</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += cnt[len<span class="number">-1</span>] - cnt[d[i]];</span><br><span class="line">            ans -= <span class="number">1L</span>L*(n-i<span class="number">-1</span>)*(n-i<span class="number">-2</span>)/<span class="number">2</span>;</span><br><span class="line">            ans -= <span class="number">1L</span>L*i*(n-i<span class="number">-1</span>);</span><br><span class="line">            ans -= n<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">7</span>) &lt;&lt; (<span class="keyword">double</span>)ans/tot &lt;&lt; <span class="built_in">endl</span>;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;King OMeGa catched three men who had been str
      
    
    </summary>
    
    
      <category term="FFT" scheme="http://aoudad.cn/tags/FFT/"/>
    
      <category term="计数" scheme="http://aoudad.cn/tags/%E8%AE%A1%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Camp Day1 D 拆拆拆数</title>
    <link href="http://aoudad.cn/2019/02/02/Camp-Day1-D-%E6%8B%86%E6%8B%86%E6%8B%86%E6%95%B0/"/>
    <id>http://aoudad.cn/2019/02/02/Camp-Day1-D-拆拆拆数/</id>
    <published>2019-02-02T13:56:20.000Z</published>
    <updated>2019-02-02T14:05:43.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>读入$A$和$B$，$wls$想请你把$A$拆成$a_1, a_2, …, a_n$​，把$B$拆成$b_1, b_2, …, b_n$​，满足</p><ol><li>对于所有的$i(1 \leq i \leq n)$，$a_i, b_i \geq 2i(1≤i≤n)$，$ai​,bi​ \geq 2$  且  $gcd(a_i, b_i) = 1$    </li><li>$\sum_{i=1}^{n}{a_i} = A$，$\sum_{i=1}^{n}{b_i} = B$<br>如果有多组满足条件的$a$和$b$，请输出$n$最小的任意一组即可。<br>如果无解，请输出$-1$。</li></ol><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>第一行一个整数$test$表示数据组数。<br>接下来$test$行，每行两个整数$A$，$B$。<br>$1 \leq test \leq 100000$<br>$5 \leq A, B \leq 10^{18}$</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>对于每组数据，第一行输出一个整数$n$；<br>接下来$n$行每行输出两个整数$a_i​$，$b_i​$表示答案。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>2<br>6 5<br>100000 100000</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>1<br>6 5<br>2<br>49999 50001<br>50001 49999</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>给两个数，分别拆成x组，使得两两之间互质。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>分类讨论，如果原本给的两个数就是互质的，显然他们本身就是最优的。如果不是，两个数都是偶数，根据哥德巴赫猜想，都分成两个素数之和是可行的，如果两个都是奇数，那么拆成2，n-2和m-2，2是满足题意的，如果是一奇一偶且奇数（假设为n）大于偶数（假设为m），那么分成2，n-2和3， m-3或者4， n-4和3，m-3是可行的，因为m-3≥3，所以n-2和n-4不可能同时能整除m-3.如果n小于m，那么2，n-2和3， m-3或者2， n-2和5，m-5是可行的，原因类似上一点。当然知道分成两组一定可以的话，直接随机也是可以的【我们队比赛中的做法】。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1e18</span>;</span><br><span class="line"><span class="function">ll <span class="title">get</span><span class="params">(ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x = (ll)rand()*rand()%m*rand()%m;</span><br><span class="line">    <span class="keyword">while</span>(x&lt;<span class="number">2</span>||x+<span class="number">2</span>&gt;m) x = (ll)rand()*rand()%m*rand()%m;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll a, b;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;a, &amp;b);</span><br><span class="line">        <span class="keyword">if</span>(__gcd(a, b)==<span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"1\n%lld %lld\n"</span>, a, b);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"2\n"</span>);</span><br><span class="line">            ll x, y;</span><br><span class="line">            srand(time(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">for</span>(;;)</span><br><span class="line">            &#123;</span><br><span class="line">                ll x = get(a), y = get(b);</span><br><span class="line">                <span class="keyword">if</span>(__gcd(x, y)==<span class="number">1</span>&amp;&amp;__gcd(a-x,b-y)==<span class="number">1</span>) &#123;<span class="built_in">printf</span>(<span class="string">"%lld %lld\n%lld %lld\n"</span>, x, y, a-x, b-y);<span class="keyword">break</span>;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;读入$A$和$B$，$wls$想请你把$A$拆成$a_1, a_2, …, a_n$​，把
      
    
    </summary>
    
    
      <category term="DP" scheme="http://aoudad.cn/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>HDU1402 A*B problem plus</title>
    <link href="http://aoudad.cn/2019/02/02/HDU1402-A-B-problem-plus/"/>
    <id>http://aoudad.cn/2019/02/02/HDU1402-A-B-problem-plus/</id>
    <published>2019-02-02T13:26:25.000Z</published>
    <updated>2019-02-02T13:28:38.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>Calculate A * B.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>Each line will contain two integers A and B. Process to end of file. </p><p>Note: the length of each integer will not exceed 50000. </p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>For each case, output A * B in one line. </p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>1 2<br>1000 2</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>2<br>2000</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>求A*B，A，B的长度小于50000。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>FFT模板题。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Complex(<span class="keyword">double</span> _x=<span class="number">0</span>, <span class="keyword">double</span> _y=<span class="number">0</span>):x(_x), y(_y)&#123;&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>-(<span class="keyword">const</span> Complex&amp; b)<span class="keyword">const</span>&#123;<span class="keyword">return</span> Complex(x-b.x, y-b.y);&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>+(<span class="keyword">const</span> Complex&amp; b)<span class="keyword">const</span>&#123;<span class="keyword">return</span> Complex(x+b.x, y+b.y);&#125;</span><br><span class="line">    Complex <span class="keyword">operator</span>*(<span class="keyword">const</span> Complex&amp; b)<span class="keyword">const</span>&#123;<span class="keyword">return</span> Complex(x*b.x-y*b.y, x*b.y+y*b.x);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(Complex y[], <span class="keyword">int</span> len, <span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit = suf_zero(len)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) rev[i] = (rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) <span class="keyword">if</span>(i&lt;rev[i]) swap(y[i], y[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">2</span>;h&lt;=len;h&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Complex wn(cos(-on*2*PI/h), sin(-on*2*PI/h));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j+=h)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function">Complex <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;j+h/<span class="number">2</span>;k++)</span><br><span class="line">            &#123;</span><br><span class="line">                Complex u  = y[k];</span><br><span class="line">                Complex t = w*y[k+h/<span class="number">2</span>];</span><br><span class="line">                y[k] = u+t;</span><br><span class="line">                y[k+h/<span class="number">2</span>] = u-t;</span><br><span class="line">                w = w*wn;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on==<span class="number">-1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) y[i].x /= len;</span><br><span class="line">&#125;</span><br><span class="line">Complex x1[maxn], x2[maxn];</span><br><span class="line"><span class="keyword">char</span> str1[maxn/<span class="number">2</span>], str2[maxn/<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> sum[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line"><span class="comment">//    freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%s"</span>, str1, str2))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> len1 = <span class="built_in">strlen</span>(str1);</span><br><span class="line">        <span class="keyword">int</span> len2 = <span class="built_in">strlen</span>(str2);</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(len&lt;len1*<span class="number">2</span>||len&lt;len2*<span class="number">2</span>) len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len1;++i)</span><br><span class="line">            x1[i] = Complex(str1[len1<span class="number">-1</span>-i]-<span class="string">'0'</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len1;i&lt;len;++i)</span><br><span class="line">            x1[i] = Complex(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len2;++i)</span><br><span class="line">            x2[i] = Complex(str2[len2<span class="number">-1</span>-i]-<span class="string">'0'</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len2;i&lt;len;++i)</span><br><span class="line">            x2[i] = Complex(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        fft(x1, len, <span class="number">1</span>);</span><br><span class="line">        fft(x2, len, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) x1[i]=x1[i]*x2[i];<span class="comment">//, printf("%lf ", x1[i].x);;</span></span><br><span class="line">        fft(x1, len, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) sum[i]=(<span class="keyword">int</span>)(x1[i].x+<span class="number">0.5</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            sum[i+<span class="number">1</span>] += sum[i] / <span class="number">10</span>;</span><br><span class="line">            sum[i] %= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        len = len1+len2<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum[len]&lt;=<span class="number">0</span>&amp;&amp;len&gt;<span class="number">0</span>)--len;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=len;i&gt;=<span class="number">0</span>;--i) <span class="built_in">printf</span>(<span class="string">"%c"</span>, sum[i]+<span class="string">'0'</span>);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Calculate A * B.&lt;/p&gt;
&lt;h2 id=&quot;Input&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="FFT" scheme="http://aoudad.cn/tags/FFT/"/>
    
  </entry>
  
  <entry>
    <title>Camp Day8 D 吉良吉影的奇妙计划</title>
    <link href="http://aoudad.cn/2019/02/02/Camp-Day8-D-%E5%90%89%E8%89%AF%E5%90%89%E5%BD%B1%E7%9A%84%E5%A5%87%E5%A6%99%E8%AE%A1%E5%88%92/"/>
    <id>http://aoudad.cn/2019/02/02/Camp-Day8-D-吉良吉影的奇妙计划/</id>
    <published>2019-02-02T12:35:19.000Z</published>
    <updated>2019-02-03T14:36:41.375Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>吉良吉影是一个平凡的上班族，他决定在休假的闲暇时光里制定接下来2n2n天的指甲修剪计划。</p><p>首先，吉良吉影会在纸上写下2n个字（左、右各n个），表示他每天是修剪左手的指甲还是右手的指甲。但是吉良吉影是一个称职的上班族，不会浪费这么多时间在修剪指甲上，于是他决定将一些位置改成空（即那天不剪指甲）。吉良吉影从头扫视整个计划，如果出现连续两天，剪的是不同的手，那么他就会将这两天改成空，并从头开始重复这个过程。直到不存在连续两天剪不同手的指甲为止。比如初始的计划为左左右左左右右右，那么在第一次修改后变成左空空左左右右右，在第二次修改后变成左空空左空空右右。由于吉良吉影的指甲生长的非常快，所以他不能容忍出现连续4天或以上的空，如果在最终的计划中出现了连续4个的空，那么他认为这样的计划不合法并炸掉计划。</p><p>现在吉良吉影想知道，他可能造出多少种合法的计划？两个计划被认为不同，当且仅当存在任意一天的选择不同。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>第一行包含一个整数 $n(1 \le n \le 10^5)$ </p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>输出仅一行，表示合法计划的数量，对998244353取模。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>3</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>6</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>问题可以看成是找到有多少长度为2n的−1, 0, +1组成的序列，满足：<br>0总是成对出现<br>不包含4个连续0<br>+1, −1不能相邻<br>所有数的和为0</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>这道题实在是太神仙了，搞了两天还是没办法写出来，虽然感觉离正解越来越近了。<br>这是n=6时的方案种类，打表出来的。<br>-1 -1 -1 -1 -1  0  0  1  1  1  1  1<br>-1 -1 -1 -1  0  0  1  0  0  1  1  1<br>-1 -1 -1 -1  0  0  1  1  0  0  1  1<br>-1 -1 -1 -1  0  0  1  1  1  0  0  1<br>-1 -1 -1 -1  0  0  1  1  1  1  0  0<br>-1 -1 -1  0  0 -1  0  0  1  1  1  1<br>-1 -1 -1  0  0  1  0  0  1  0  0  1<br>-1 -1 -1  0  0  1  0  0  1  1  0  0<br>-1 -1 -1  0  0  1  1  0  0  1  0  0<br>-1 -1 -1  0  0  1  1  1  1  0  0 -1<br>-1 -1  0  0 -1 -1  0  0  1  1  1  1<br>-1 -1  0  0 -1  0  0  1  0  0  1  1<br>-1 -1  0  0 -1  0  0  1  1  0  0  1<br>-1 -1  0  0 -1  0  0  1  1  1  0  0<br>-1 -1  0  0  1  0  0 -1  0  0  1  1<br>-1 -1  0  0  1  0  0  1  1  0  0 -1<br>-1 -1  0  0  1  1  0  0 -1  0  0  1<br>-1 -1  0  0  1  1  0  0  1  0  0 -1<br>-1 -1  0  0  1  1  1  0  0 -1  0  0<br>-1 -1  0  0  1  1  1  1  0  0 -1 -1<br>-1  0  0 -1 -1 -1  0  0  1  1  1  1<br>-1  0  0 -1 -1  0  0  1  0  0  1  1<br>-1  0  0 -1 -1  0  0  1  1  0  0  1<br>-1  0  0 -1 -1  0  0  1  1  1  0  0<br>-1  0  0 -1  0  0 -1  0  0  1  1  1<br>-1  0  0 -1  0  0  1  0  0  1  0  0<br>-1  0  0 -1  0  0  1  1  1  0  0 -1<br>-1  0  0  1  0  0 -1 -1  0  0  1  1<br>-1  0  0  1  0  0 -1  0  0  1  0  0<br>-1  0  0  1  0  0  1  0  0 -1  0  0<br>-1  0  0  1  0  0  1  1  0  0 -1 -1<br>-1  0  0  1  1  0  0 -1 -1  0  0  1<br>-1  0  0  1  1  0  0  1  0  0 -1 -1<br>-1  0  0  1  1  1  0  0 -1 -1  0  0<br>-1  0  0  1  1  1  0  0 -1  0  0 -1<br>-1  0  0  1  1  1  1  0  0 -1 -1 -1<br> 0  0 -1 -1 -1 -1  0  0  1  1  1  1<br> 0  0 -1 -1 -1  0  0  1  0  0  1  1<br> 0  0 -1 -1 -1  0  0  1  1  0  0  1<br> 0  0 -1 -1 -1  0  0  1  1  1  0  0<br> 0  0 -1 -1  0  0 -1  0  0  1  1  1<br> 0  0 -1 -1  0  0  1  0  0  1  0  0<br> 0  0 -1 -1  0  0  1  1  1  0  0 -1<br> 0  0 -1  0  0 -1 -1  0  0  1  1  1<br> 0  0 -1  0  0 -1  0  0  1  0  0  1<br> 0  0 -1  0  0 -1  0  0  1  1  0  0<br> 0  0 -1  0  0  1  0  0 -1  0  0  1<br> 0  0 -1  0  0  1  0  0  1  0  0 -1<br> 0  0 -1  0  0  1  1  0  0 -1  0  0<br> 0  0 -1  0  0  1  1  1  0  0 -1 -1<br> 0  0  1  0  0 -1 -1 -1  0  0  1  1<br> 0  0  1  0  0 -1 -1  0  0  1  0  0<br> 0  0  1  0  0 -1  0  0 -1  0  0  1<br> 0  0  1  0  0 -1  0  0  1  0  0 -1<br> 0  0  1  0  0  1  0  0 -1 -1  0  0<br> 0  0  1  0  0  1  0  0 -1  0  0 -1<br> 0  0  1  0  0  1  1  0  0 -1 -1 -1<br> 0  0  1  1  0  0 -1 -1 -1  0  0  1<br> 0  0  1  1  0  0 -1  0  0 -1  0  0<br> 0  0  1  1  0  0  1  0  0 -1 -1 -1<br> 0  0  1  1  1  0  0 -1 -1 -1  0  0<br> 0  0  1  1  1  0  0 -1 -1  0  0 -1<br> 0  0  1  1  1  0  0 -1  0  0 -1 -1<br> 0  0  1  1  1  1  0  0 -1 -1 -1 -1<br> 1  0  0 -1 -1 -1 -1  0  0  1  1  1<br> 1  0  0 -1 -1 -1  0  0  1  0  0  1<br> 1  0  0 -1 -1 -1  0  0  1  1  0  0<br> 1  0  0 -1 -1  0  0 -1  0  0  1  1<br> 1  0  0 -1 -1  0  0  1  1  0  0 -1<br> 1  0  0 -1  0  0 -1 -1  0  0  1  1<br> 1  0  0 -1  0  0 -1  0  0  1  0  0<br> 1  0  0 -1  0  0  1  0  0 -1  0  0<br> 1  0  0 -1  0  0  1  1  0  0 -1 -1<br> 1  0  0  1  0  0 -1 -1 -1  0  0  1<br> 1  0  0  1  0  0 -1  0  0 -1  0  0<br> 1  0  0  1  0  0  1  0  0 -1 -1 -1<br> 1  0  0  1  1  0  0 -1 -1 -1  0  0<br> 1  0  0  1  1  0  0 -1 -1  0  0 -1<br> 1  0  0  1  1  0  0 -1  0  0 -1 -1<br> 1  0  0  1  1  1  0  0 -1 -1 -1 -1<br> 1  1  0  0 -1 -1 -1 -1  0  0  1  1<br> 1  1  0  0 -1 -1 -1  0  0  1  0  0<br> 1  1  0  0 -1 -1  0  0 -1  0  0  1<br> 1  1  0  0 -1 -1  0  0  1  0  0 -1<br> 1  1  0  0 -1  0  0 -1 -1  0  0  1<br> 1  1  0  0 -1  0  0  1  0  0 -1 -1<br> 1  1  0  0  1  0  0 -1 -1 -1  0  0<br> 1  1  0  0  1  0  0 -1 -1  0  0 -1<br> 1  1  0  0  1  0  0 -1  0  0 -1 -1<br> 1  1  0  0  1  1  0  0 -1 -1 -1 -1<br> 1  1  1  0  0 -1 -1 -1 -1  0  0  1<br> 1  1  1  0  0 -1 -1  0  0 -1  0  0<br> 1  1  1  0  0 -1  0  0 -1 -1  0  0<br> 1  1  1  0  0 -1  0  0 -1  0  0 -1<br> 1  1  1  0  0  1  0  0 -1 -1 -1 -1<br> 1  1  1  1  0  0 -1 -1 -1 -1  0  0<br> 1  1  1  1  0  0 -1 -1 -1  0  0 -1<br> 1  1  1  1  0  0 -1 -1  0  0 -1 -1<br> 1  1  1  1  0  0 -1  0  0 -1 -1 -1<br> 1  1  1  1  1  0  0 -1 -1 -1 -1 -1 </p><p>通过上面的表，可以做以下思考</p><p>补充几个在求答案中需要用到的条件：  </p><p>1.序列的前缀和总是非负<br>2.序列的前缀和总是为正（除了整个序列的和为0）<br>3.序列的结尾是0<br>4.序列的结尾非0  </p><p>现在用$f_{ab···i}$来表示满足额外条件a, b, · · · 的长度为2i的序列数，用$S_i$表示序列前i位（序列位置从1开始标<br>号）的和。目标即求$f_n$。<br>那么有  </p><ol><li>$f_i = f_{3i} + f_{4i}$  </li><li>$f_{1i} = f_{13i} + f_{14i}$  </li><li>$f_{13i} = f_{14i}−1$（因为不能包含4个连续0，对于所有满足条件3的序列去掉末尾的两个0，就会变成满足条件4的序列）  </li><li>$f_{14i} =\Sigma_{j=0}^{i-1} f_{13j}f_{2i−j}$ （对于每个满足条件14的序列，总可以找到最大的一个$x &lt; 2n$满足$S_x = 0$，容易证明$x$必然为偶数，对于任意的$y(x &lt; y &lt; 2n)$有$Sy = Sy − Sx &gt; 0$，即可以将原序列看成满足条件$13$的长为$x$的序列（这里其实应该是满足条件$1$且末尾不为$−1$的，而由于满足条件$1$末尾不可能为$+1$，所以等价于满足条件$13$）与满足条件$2$的长为$2n − x$的序列（开头必为$+1$，所以前半段末尾不能为$−1$）拼接而成）</li><li>$f_{2i} = f_{1i−1}$ （满足条件2的序列的开头必然是$+1$，结尾必然是$−1$，将开头与结尾去掉后，满足条件1）  </li><li>$f_{3i} = f_{4i}−1$  </li><li>$f_{4i} = \Sigma_{j=0}^{i-1}2<em>f_{3j}</em>f_{2i−j} + f_{4j}f_{2i−j}$ （类似求$f_{14i}$,枚举最大的x&lt;2n满足前缀和为0，分这个位置是0和不为0两种情况统计，显然无论哪种情况，后半段的任意前缀和都不能为0。对于这个位置是0的情况，后半段任意前缀和恒正、恒负都可以，所以有一个常数2；对于这个位置不是0的情况，后半段的前缀和的正负性必须和这个位置相同，因为1和-1不能连续出现。因为序列中只有1,0,-1三种元素，所以前缀和的变化实际上是“连续”的，所以“任意前缀和都不能为0”等价于“前缀和恒正或恒负”）<br>接下来只需要将式子化简使用两次分治NTT即可求出$f_n$。</li></ol><p>以上出自出题人的题解，将式子化简之后应该可以推出$f_{14i}$或者$f_{13i}$关于自己的卷积函数，然后这里应该是可以用分治NTT推出来的，然后可以简单的推出$f_{2i}$，然后可以进一步采用正常的分治NTT解出$f_{4i}$，然后使用第一个式子就能得到答案。理论上应该是这样，但是我第一部就卡住了。以下附了一份解决求<script type="math/tex">f(0)=1$$$$f(i)=\Sigma_{j=0}^{i-1} f(j)*f(i-j-1)</script>的代码，还有一份写了一个下午的假代码，暂时应该是没有能力做出来这道题的了。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://www.cnblogs.com/yinwuxiao/p/9570533.html</span></span><br><span class="line"><span class="comment">/*******</span></span><br><span class="line"><span class="comment"> *真·NTT</span></span><br><span class="line"><span class="comment"> *$Calc f(i) = \Sigma_&#123;j=0&#125;^&#123;i-1&#125; f(j)*f(i-j-1)$</span></span><br><span class="line"><span class="comment"> *******/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">8e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> _g = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll <span class="title">q_p</span><span class="params">(ll base, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans = ans * base % mod;</span><br><span class="line">        base = base* base %mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll y[], <span class="keyword">int</span> len, <span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit = suf_zero(len)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) rev[i] = (rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) <span class="keyword">if</span>(i&lt;rev[i]) swap(y[i], y[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">2</span>;h&lt;=len;h&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll wn = q_p(_g, (mod<span class="number">-1</span>)/h);</span><br><span class="line">        <span class="keyword">if</span>(on==<span class="number">-1</span>) wn = q_p(wn, mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j+=h)</span><br><span class="line">        &#123;</span><br><span class="line">            ll w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;j+h/<span class="number">2</span>;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                ll u = y[k], t = w*y[k+h/<span class="number">2</span>]%mod;</span><br><span class="line">                y[k] = (u+t)%mod;</span><br><span class="line">                y[k+h/<span class="number">2</span>] = (u-t+mod+mod)%mod;</span><br><span class="line">                w = w*wn%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on==<span class="number">-1</span>)&#123;ll t=q_p(len, mod<span class="number">-2</span>);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) y[i]=y[i]*t%mod;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Calc</span><span class="params">(ll *A, ll *B, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NTT(A, len, <span class="number">1</span>);NTT(B, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) A[i] = A[i] * B[i] % mod;</span><br><span class="line">    NTT(A, len, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RcdqNTT</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    RcdqNTT(l, mid);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(r-l&lt;l)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> SZ = mid-l+<span class="number">1</span>+r-l+<span class="number">1</span>, len = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(len&lt;SZ) len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) A[i]=B[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=mid-l;++i) A[i] = f[i+l];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=r-l;++i) B[i] = f[i];</span><br><span class="line">        Calc(A, B, len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            f[i] = (f[i]+<span class="number">2</span>*A[i-l<span class="number">-1</span>])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> SZ = mid-l+<span class="number">1</span>, len=<span class="number">1</span>;<span class="keyword">while</span>(len&lt;SZ*<span class="number">2</span>)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) A[i]=B[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ;++i) A[i]=B[i]=f[i+l];</span><br><span class="line">    Calc(A, B, len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">        <span class="keyword">if</span>(i&gt;=l+l)</span><br><span class="line">            f[i] = (f[i]+A[i-l-l<span class="number">-1</span>])%mod;</span><br><span class="line"></span><br><span class="line">    RcdqNTT(mid+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line"><span class="comment">//    freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    f[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/// 对拍</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;++j)</span><br><span class="line">            f[i] += f[j]*f[i-j<span class="number">-1</span>];</span><br><span class="line">        f[i]%=mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">cout</span> &lt;&lt; f[i] &lt;&lt; <span class="string">' '</span> ;<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) f[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">1</span>;<span class="keyword">while</span>(len&lt;n)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    RcdqNTT(<span class="number">0</span>, len<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) <span class="built_in">cout</span> &lt;&lt; f[i] &lt;&lt; <span class="string">' '</span> ;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">8e5</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> _g = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll <span class="title">q_p</span><span class="params">(ll base, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans = ans * base % mod;</span><br><span class="line">        base = base* base %mod;</span><br><span class="line">        n&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> rev[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(ll y[], <span class="keyword">int</span> len, <span class="keyword">int</span> on)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> bit = suf_zero(len)<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) rev[i] = (rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;(bit<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;len;++i) <span class="keyword">if</span>(i&lt;rev[i]) swap(y[i], y[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> h=<span class="number">2</span>;h&lt;=len;h&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll wn = q_p(_g, (mod<span class="number">-1</span>)/h);</span><br><span class="line">        <span class="keyword">if</span>(on==<span class="number">-1</span>) wn = q_p(wn, mod<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;len;j+=h)</span><br><span class="line">        &#123;</span><br><span class="line">            ll w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=j;k&lt;j+h/<span class="number">2</span>;++k)</span><br><span class="line">            &#123;</span><br><span class="line">                ll u = y[k], t = w*y[k+h/<span class="number">2</span>]%mod;</span><br><span class="line">                y[k] = (u+t)%mod;</span><br><span class="line">                y[k+h/<span class="number">2</span>] = (u-t+mod+mod)%mod;</span><br><span class="line">                w = w*wn%mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(on==<span class="number">-1</span>)&#123;ll t=q_p(len, mod<span class="number">-2</span>);<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) y[i]=y[i]*t%mod;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Calc</span><span class="params">(ll *A, ll *B, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    NTT(A, len, <span class="number">1</span>);NTT(B, len, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) A[i] = A[i] * B[i] % mod;</span><br><span class="line">    NTT(A, len, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">ll A[maxn], B[maxn];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void RcdqNTT(int l, int r)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    if(l&gt;=r) return ;</span></span><br><span class="line"><span class="comment">    int mid = (l+r)&gt;&gt;1;</span></span><br><span class="line"><span class="comment">    RcdqNTT(l, mid);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    if(r-l&lt;l)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        int SZ = mid-l+1+r-l+1, len = 1;</span></span><br><span class="line"><span class="comment">        while(len&lt;SZ) len&lt;&lt;=1;</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;len;++i) A[i]=B[i]=0;</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;=mid-l;++i) A[i] = f[i+l];</span></span><br><span class="line"><span class="comment">        for(int i=0;i&lt;=r-l;++i) B[i] = f[i];</span></span><br><span class="line"><span class="comment">        Calc(A, B, len);</span></span><br><span class="line"><span class="comment">        for(int i=mid+1;i&lt;=r;++i)</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            f[i] = (f[i]+2*A[i-l-1])%mod;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    int SZ = mid-l+1, len=1;while(len&lt;SZ*2)len&lt;&lt;=1;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;len;++i) A[i]=B[i]=0;</span></span><br><span class="line"><span class="comment">    for(int i=0;i&lt;SZ;++i) A[i]=B[i]=f[i+l];</span></span><br><span class="line"><span class="comment">    Calc(A, B, len);</span></span><br><span class="line"><span class="comment">    for(int i=mid+1;i&lt;=r;++i)</span></span><br><span class="line"><span class="comment">        if(i&gt;=l+l)</span></span><br><span class="line"><span class="comment">            f[i] = (f[i]+A[i-l-l-1])%mod;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    RcdqNTT(mid+1, r);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ll f13[maxn], f2[maxn], f4[maxn];<span class="comment">//, f[maxn];</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve13</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//    if(r&lt;=4)return ;</span></span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r) <span class="keyword">return</span> ;</span><br><span class="line">    <span class="keyword">int</span> mid = (l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    solve13(l, mid);</span><br><span class="line">    error(l, mid, r);</span><br><span class="line">    <span class="keyword">if</span>(r-l&lt;l)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> SZ = r-l+<span class="number">1</span>+mid-l+<span class="number">1</span>, len = <span class="number">1</span>;<span class="keyword">while</span>(len&lt;SZ)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) A[i]=B[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=r-l;++i) A[i] = f13[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;mid-l+<span class="number">1</span>;++i) B[i] = f13[i+l];</span><br><span class="line">        ll tmp = f13[mid];</span><br><span class="line">        Calc(A, B, len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;=l+<span class="number">2</span>)</span><br><span class="line">                f13[i] = (f13[i]+<span class="number">2</span>*A[i-l<span class="number">-2</span>])%mod;</span><br><span class="line">            f13[i] = (f13[i]+<span class="number">2</span>*A[i-l<span class="number">-1</span>])%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        f13[mid+<span class="number">1</span>] = (f13[mid+<span class="number">1</span>]-tmp%mod+mod)%mod;</span><br><span class="line"><span class="comment">//        if(mid+1&gt;=l+2) f13[mid+1] = (f13[mid+1]-B[SZ-1]*B[mid+0-l-l-SZ]%mod+mod)%mod;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> SZ = mid-l+<span class="number">1</span>, len = <span class="number">1</span>;<span class="keyword">while</span>(len&lt;SZ*<span class="number">2</span>)len&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i)A[i] = B[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ;++i) A[i] = B[i] = f13[i+l];</span><br><span class="line">    Calc(A, B, len);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) B[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;SZ;++i) B[i] = f13[i+l];</span><br><span class="line"><span class="comment">//    for(int i=0;i&lt;len;++i) cout &lt;&lt; A[i] &lt;&lt; ' ';cout&lt;&lt;endl;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=mid+<span class="number">1</span>;i&lt;=r;++i)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//        error(i, l+l+1, f13[i]);</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;=l+l+<span class="number">2</span>)</span><br><span class="line">            f13[i] = (f13[i]+A[i-l-l<span class="number">-2</span>])%mod;</span><br><span class="line"><span class="comment">//        error(i, l+l+1, f13[i]);++</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;=l+l+<span class="number">1</span>)</span><br><span class="line">            f13[i] = (f13[i]+A[i-l-l<span class="number">-1</span>])%mod;</span><br><span class="line">        error(i, l+l+<span class="number">1</span>, f13[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mid+<span class="number">1</span>&gt;=l*<span class="number">2</span>+<span class="number">1</span>) f13[mid+<span class="number">1</span>] = (f13[mid+<span class="number">1</span>]<span class="number">-2</span>*B[SZ<span class="number">-1</span>]*B[mid+<span class="number">1</span>-l-l-SZ]%mod+mod)%mod;</span><br><span class="line">    <span class="keyword">if</span>(mid==<span class="number">0</span>) f13[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;++i) <span class="built_in">cout</span> &lt;&lt; f13[i] &lt;&lt; <span class="string">' '</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">solve13(mid+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line"><span class="comment">//    freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">8</span>;</span><br><span class="line"><span class="comment">//    cin &gt;&gt; n;</span></span><br><span class="line">    <span class="built_in">memset</span>(f13, <span class="number">0</span>, <span class="keyword">sizeof</span> f13);</span><br><span class="line">    f13[<span class="number">0</span>]=(mod+<span class="number">1</span>)/<span class="number">2</span>, f13[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//, f13[4] = 2, f13[2] = 0, f13[3] = 1;</span></span><br><span class="line">    solve13(<span class="number">1</span>, n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; f13[i] &lt;&lt; <span class="string">' '</span>;<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;吉良吉影是一个平凡的上班族，他决定在休假的闲暇时光里制定接下来2n2n天的指甲修剪计划。&lt;
      
    
    </summary>
    
    
      <category term="分治NTT" scheme="http://aoudad.cn/tags/%E5%88%86%E6%B2%BBNTT/"/>
    
  </entry>
  
  <entry>
    <title>CodeforcesD21106-E Lunar New Year and Red Envelopes</title>
    <link href="http://aoudad.cn/2019/02/02/CodeforcesD21106-E/"/>
    <id>http://aoudad.cn/2019/02/02/CodeforcesD21106-E/</id>
    <published>2019-02-02T06:34:22.000Z</published>
    <updated>2019-02-02T06:52:05.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>Lunar New Year is approaching, and Bob is going to receive some red envelopes with countless money! But collecting money from red envelopes is a time-consuming process itself.<br>Let’s describe this problem in a mathematical way. Consider a timeline from time $1$ to $n$. The $i$-th red envelope will be available from time $s_i$ to $t_i$, inclusive, and contain $w_i$ coins. If Bob chooses to collect the coins in the $i$-th red envelope, he can do it only in an integer point of time between $s_i$ and $t_i$, inclusive, and he can’t collect any more envelopes until time $d_i$ (inclusive) after that. Here $s_i \leq t_i \leq d_i$ holds.<br>Bob is a greedy man, he collects coins greedily — whenever he can collect coins at some integer time $x$, he collects the available red envelope with the maximum number of coins. If there are multiple envelopes with the same maximum number of coins, Bob would choose the one whose parameter $d$ is the largest. If there are still multiple choices, Bob will choose one from them randomly.<br>However, Alice — his daughter — doesn’t want her father to get too many coins. She could disturb Bob at no more than $m$ integer time moments. If Alice decides to disturb Bob at time $x$, he could not do anything at time $x$ and resumes his usual strategy at the time $x + 1$ (inclusive), which may lead to missing some red envelopes.<br>Calculate the minimum number of coins Bob would get if Alice disturbs him optimally.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>The first line contains three non-negative integers n, m and k $(1≤n≤10^5, 0≤m≤200, 1≤k≤10^5)$, denoting the length of the timeline, the number of times Alice can disturb Bob and the total number of red envelopes, respectively.</p><p>The following $k$ lines describe those $k$ red envelopes. The i-th line contains four positive integers si, ti, di and wi ($1 \leq s_i \leq t_i≤d_i \leq n$,  $1 \leq wi \leq 10^9$ ) — the time segment when the i-th envelope is available, the time moment Bob can continue collecting after collecting the i-th envelope, and the number of coins in this envelope, respectively.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>Output one integer — the minimum number of coins Bob would get if Alice disturbs him optimally.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>12 2 6<br>1 5 5 4<br>4 6 6 2<br>3 8 8 3<br>2 9 9 5<br>6 10 10 7<br>8 12 12 9</p><p>10 1 6<br>1 1 2 4<br>2 2 6 2<br>3 3 3 3<br>4 4 4 5<br>5 5 5 7<br>6 6 6 9</p><p>5 0 2<br>1 3 4 5<br>2 5 5 8</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>11</p><p>2</p><p>13</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>时间长度为n，每一秒SB Bob会拿一次红包，每个红包有三种属性，$s, t, d, w$分别表示这个红包出现的开始时间，结束时间，领这个红包之后d时刻之前都不能再领红包，以及这个红包里面有的钱。每个时刻Bob会贪心的选择(w, d)最大的红包。Alice有m次干扰操作，每次他可以选择一个时刻进行干扰，这个时刻被干扰的话，Bob就不能拿红包。求Bob会拿到的最少金额的红包是多少。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>先预处理初每个时刻Bob的决策，再从后往前DP。预处理就是拿个扫描线从左往右扫，用一个multiset维护一下，遇到s就加入multiset，遇到t+1就从multiset中去掉。DP的话，定义$dp[i][j]$ 表示 $i \dots n$干扰j次的最小硬币数量。状态转移是很显然的，就i时刻干不干扰两种决策。除了dp[n+1][0]为0以外，全都初始化为INF。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">7</span>;</span><br><span class="line">ll dp[maxn][<span class="number">305</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> w, d, id;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node&amp; a, <span class="keyword">const</span> Node&amp; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.w!=b.w) <span class="keyword">return</span> a.w&gt;b.w;</span><br><span class="line">        <span class="keyword">return</span> a.d &gt; b.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;d[maxn];</span><br><span class="line"><span class="built_in">multiset</span>&lt;Node&gt; s;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt; vec[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line"><span class="comment">//    freopen("in.txt", "r", stdin);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> n, m, k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> s, t, w, d;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t &gt;&gt; d &gt;&gt; w;</span><br><span class="line">        vec[s].eb((Node)&#123;w, d, <span class="number">1</span>&#125;);</span><br><span class="line">        vec[t+<span class="number">1</span>].eb((Node)&#123;w, d,<span class="number">-1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;vec[i].size();++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(vec[i][j].id==<span class="number">1</span>) s.insert(vec[i][j]);</span><br><span class="line">            <span class="keyword">else</span> &#123;vec[i][j].id=<span class="number">1</span>;s.erase(s.find(vec[i][j]));&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            d[i].d = i;d[i].w=d[i].id=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> d[i] = *s.begin();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x37</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    dp[n+<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = min(dp[i][<span class="number">0</span>], d[i].w + dp[d[i].d+<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][j] = min(dp[i][j], dp[i+<span class="number">1</span>][j<span class="number">-1</span>]);</span><br><span class="line">            dp[i][j] = min(dp[i][j], d[i].w + dp[d[i].d+<span class="number">1</span>][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll ans = INFLL;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=m;++i) ans = min(ans, dp[<span class="number">1</span>][i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Lunar New Year is approaching, and Bob is goi
      
    
    </summary>
    
    
      <category term="DP" scheme="http://aoudad.cn/tags/DP/"/>
    
  </entry>
  
  <entry>
    <title>CodeforcesD21106 F Lunar New Year and a Recursive Sequence</title>
    <link href="http://aoudad.cn/2019/02/01/CodeforcesD21106-F/"/>
    <id>http://aoudad.cn/2019/02/01/CodeforcesD21106-F/</id>
    <published>2019-02-01T03:56:00.000Z</published>
    <updated>2019-02-01T04:11:46.465Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>Lunar New Year is approaching, and Bob received a gift from his friend recently — a recursive sequence! He loves this sequence very much and wants to play with it.<br>Let $f_1, f_2, \ldots, f_i, \ldots$ be an infinite sequence of positive integers. Bob knows that for $i&gt;k$ , $f_i$ can be obtained by the following recursive equation:<script type="math/tex">f_i = \left(f_{i - 1} ^ {b_1} \cdot f_{i - 2} ^ {b_2} \cdot \cdots \cdot f_{i - k} ^ {b_k}\right) \bmod p,</script><br>which in short is<script type="math/tex">f_i = \left(\prod_{j = 1}^{k} f_{i - j}^{b_j}\right) \bmod p,</script>where p=998244353 (a widely-used prime), $b_1, b_2, \ldots, b_k$ are known integer constants, and $x \bmod y$ denotes the remainder of x divided by y.<br>Bob lost the values of $f_1, f_2, \ldots, f_k$, which is extremely troublesome – these are the basis of the sequence! Luckily, Bob remembers the first k−1 elements of the sequence: $f_1 = f_2 = \ldots = f_{k - 1} = 1$ and the n-th element: $f_n = m$. Please find any possible value of $f_k$. If no solution exists, just tell Bob that it is impossible to recover his favorite sequence, regardless of Bob’s sadness.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>The first line contains a positive integer k$(1 \leq k \leq 100)$, denoting the length of the sequence $b_1, b_2, \ldots, b_k$ .<br>The second line contains k positive integers $b_1, b_2, \ldots, b_k$ $(1 \leq b_i &lt; p)$.<br>The third line contains two positive integers n and m ($k &lt; n \leq 10^9$, $1 \leq m &lt; p$), which implies $f_n = m$.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>Output a possible value of $f_k$, where $f_k$ is a positive integer satisfying $1 \leq f_k &lt; p$. If there are multiple answers, print any of them. If no such $f_k$ makes $f_n=m$, output −1 instead.</p><p>It is easy to show that if there are some possible values of fk, there must be at least one satisfying $1 \leq f_k &lt; p$.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>10<br>283 463 213 777 346 201 463 283 102 999<br>2333333 6263423</p><p>3<br>998244352 998244352 998244352<br>4 2</p><p>1<br>2<br>88888 66666</p><p>8<br>2 3 5 6 1 7 9 10<br>23333 1</p><p>5<br>4 7 1 5 6<br>7 14187219</p><p>3<br>2 3 5<br>4 16</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>382480067</p><p>-1</p><p>-1</p><p>1</p><p>6</p><p>4</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>一个序列的第n项可以通过前k项推出来，现在告诉你前k-1项都是1，已知第n项是m，求$f_x$。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>设 $f_k$ 为X则，可以利用矩阵快速幂和欧拉降幂求出 $f_n$ ，则原题意化为解方程 $x^a=b(mod p)$，这是个套路了，虽然我不会，但是直接扔个板子上去就行了。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e6</span>+<span class="number">8</span>;;</span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> SZ;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">M</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll a[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line">    M()&#123;<span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span> a);&#125;</span><br><span class="line">    <span class="keyword">friend</span> M <span class="keyword">operator</span>*(<span class="keyword">const</span> M&amp;a, <span class="keyword">const</span> M&amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        M ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=SZ;++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=SZ;++j)</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=SZ;++k)</span><br><span class="line">                    ans.a[i][j] += a.a[i][k] * b.a[k][j], ans.a[i][j]%=(mod<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">ll b[maxn];</span><br><span class="line"><span class="function">ll <span class="title">q_pm</span><span class="params">(ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    M res, base;</span><br><span class="line">    res.a[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=SZ;++i) base.a[<span class="number">1</span>][i] = b[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=SZ;++i) base.a[i][i<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) res = base * res;</span><br><span class="line">        base = base * base;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> met(a,b) memset(a, b, sizeof(a));</span></span><br><span class="line"><span class="function">ll <span class="title">q_p</span><span class="params">(ll base, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n&amp;<span class="number">1</span>) ans = ans * base % mod;</span><br><span class="line">        base = base * base % mod;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x7fffffff</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> dir[<span class="number">5</span>][<span class="number">2</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> ll MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">bool</span> is[maxn]; ll prm[maxn], id;</span><br><span class="line"><span class="function">ll <span class="title">getprm</span><span class="params">(ll n)</span> </span>&#123;</span><br><span class="line">    n-=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll k = <span class="number">0</span>; met(is, <span class="number">1</span>);</span><br><span class="line">    is[<span class="number">0</span>] = is[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(is[i]) prm[k++] = i;</span><br><span class="line">        <span class="keyword">for</span>(ll j = <span class="number">0</span>; j &lt; k &amp;&amp; (i*prm[j] &lt; n); ++j) &#123;</span><br><span class="line">            is[i*prm[j]] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prm[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Euler</span><span class="params">(ll x)</span> </span>&#123;    <span class="comment">//素数的欧拉函数</span></span><br><span class="line">    <span class="keyword">return</span> x<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">gcd</span><span class="params">(ll a, ll b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b ? gcd(b, a%b) : a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">extgcd</span><span class="params">(ll a, ll b, ll&amp; x, ll&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>) &#123; x=<span class="number">1</span>; y=<span class="number">0</span>; <span class="keyword">return</span> a; &#125;</span><br><span class="line">    ll d = extgcd(b, a % b, x, y);</span><br><span class="line">    ll t = x; x = y; y = t - a / b * y;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//快速乘 -- a*b % mod</span></span><br><span class="line"><span class="function">ll <span class="title">pow_mul</span><span class="params">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class="line">    ll r = <span class="number">0</span>; a %= p;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) r = (r+a) % p;</span><br><span class="line">        a = (a+a) % p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">pow_mod</span><span class="params">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class="line">    ll r = <span class="number">1</span>; a %= p;</span><br><span class="line">    <span class="keyword">while</span>(b) &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>) r = pow_mul(r, a, p);</span><br><span class="line">        a = pow_mul(a, a, p);</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求原根</span></span><br><span class="line">ll fac[maxn], num[maxn], tot;</span><br><span class="line"><span class="function">ll <span class="title">Factor</span><span class="params">(ll n)</span></span>&#123;</span><br><span class="line">    ll ans = <span class="number">1</span>, temp = n; tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll i = <span class="number">0</span>; i &lt; id &amp;&amp; prm[i] * prm[i] &lt;= temp; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (n % prm[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            fac[tot] = prm[i], num[tot] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n%prm[i] == <span class="number">0</span>) n /= prm[i], ++num[tot];</span><br><span class="line">            ans *= (num[tot] + <span class="number">1</span>);</span><br><span class="line">            ++tot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>)&#123;</span><br><span class="line">        fac[tot] = n, num[tot] = <span class="number">1</span>;</span><br><span class="line">        ans *=(num[tot]+<span class="number">1</span>);</span><br><span class="line">        ++tot;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">root</span><span class="params">(ll p)</span> </span>&#123;</span><br><span class="line">    ll phi = Euler(p);</span><br><span class="line">    Factor(phi);</span><br><span class="line">    <span class="keyword">for</span>(ll g = <span class="number">2</span>; ; g++) &#123;</span><br><span class="line">        <span class="keyword">bool</span> f = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tot; ++i) &#123;</span><br><span class="line">            ll t = phi / fac[i];</span><br><span class="line">            <span class="keyword">if</span>(pow_mod(g, t, p) == <span class="number">1</span>) &#123; f = <span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f) <span class="keyword">return</span> g;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//BSGS</span></span><br><span class="line"><span class="function">ll <span class="title">BSGS</span><span class="params">(ll a, ll b, ll p)</span> </span>&#123;</span><br><span class="line">    a %= p; b %= p;</span><br><span class="line">    <span class="built_in">map</span>&lt;ll, ll&gt; h;</span><br><span class="line">    ll m = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p)), x, y, d, t = <span class="number">1</span>, v = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(h.count(t)) h[t] = min(h[t], i);</span><br><span class="line">        <span class="keyword">else</span> h[t] = i;</span><br><span class="line">        t = pow_mul(t, a, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(ll i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        d = extgcd(v, p, x, y);</span><br><span class="line">        x = (x* b/d % p + p) % (p);</span><br><span class="line">        <span class="keyword">if</span>(h.count(x)) <span class="keyword">return</span> i*m + h[x];</span><br><span class="line">        v = pow_mul(v, t, p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//求模线性方程</span></span><br><span class="line"><span class="function">ll <span class="title">modeq</span><span class="params">(ll a, ll b, ll p, ll r[])</span> </span>&#123;</span><br><span class="line">    ll e, i, d, x, y;</span><br><span class="line">    d = extgcd(a, p, x, y);</span><br><span class="line">    <span class="keyword">if</span> (b % d) &#123; <span class="keyword">return</span> <span class="number">-1</span>; &#125;</span><br><span class="line">    e = (x * (b / d) + p) % p;</span><br><span class="line">    r[<span class="number">0</span>] = (e + p) % p;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//开始解决问题</span></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(ll a, ll b, ll p, ll r[], ll ans[])</span> </span>&#123;</span><br><span class="line">    ll g = root(p);</span><br><span class="line">    ll t1 = BSGS(g, b, p);</span><br><span class="line">    ll phi = Euler(p);</span><br><span class="line">    ll cnt = modeq(a, t1, phi, r);</span><br><span class="line">    <span class="keyword">if</span>(cnt == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    ans[<span class="number">0</span>] = pow_mod(g, r[<span class="number">0</span>], p);</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line">ll ans[maxn], res[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line">    freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;++i) <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">    SZ = k;</span><br><span class="line">    ll n, m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    ll tmp = q_pm(n-k);tmp=(tmp%(mod<span class="number">-1</span>)+mod<span class="number">-1</span>)%(mod<span class="number">-1</span>)+mod<span class="number">-1</span>;</span><br><span class="line">    id = getprm(maxn<span class="number">-1</span>);</span><br><span class="line">    ll cnt = solve(tmp, m, mod, res, ans);</span><br><span class="line">    <span class="keyword">if</span>(cnt==<span class="number">-1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans[<span class="number">0</span>] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Lunar New Year is approaching, and Bob receiv
      
    
    </summary>
    
    
      <category term="矩阵快速幂" scheme="http://aoudad.cn/tags/%E7%9F%A9%E9%98%B5%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
      <category term="欧拉降幂" scheme="http://aoudad.cn/tags/%E6%AC%A7%E6%8B%89%E9%99%8D%E5%B9%82/"/>
    
      <category term="BSGS" scheme="http://aoudad.cn/tags/BSGS/"/>
    
      <category term="原根" scheme="http://aoudad.cn/tags/%E5%8E%9F%E6%A0%B9/"/>
    
  </entry>
  
  <entry>
    <title>Camp Day8 B 玖凛两开花</title>
    <link href="http://aoudad.cn/2019/01/30/Camp-Day8-B-%E7%8E%96%E5%87%9B%E4%B8%A4%E5%BC%80%E8%8A%B1/"/>
    <id>http://aoudad.cn/2019/01/30/Camp-Day8-B-玖凛两开花/</id>
    <published>2019-01-30T03:48:10.000Z</published>
    <updated>2019-01-30T04:16:07.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>为了拯救重要之人，御原玖音和Rinne Ohara都努力地进行时间机器的研究，为此她们正在学习一些必要的算法。在学习的过程中，她们发现了一个叫做开花（Blossom algorithm，也被称作带花树）的有趣算法。<br>开花算法可以用来解决一般图最大匹配问题，经过一些修改还可以用来解决一般图最大权匹配问题。原始的开花算法的时间复杂度为 $O(|V|^2|E|)$ ，其中 $|V|,|E|$ 分别为图的点数与边数。有很多人对开花算法进行了优化，如Gabow在《 Data structures for weighted matching and nearest common ancestors with linking》一文中将一般图最大权匹配的时间复杂度优化到了 $O(|V|(|E|+|V| \log |V|))$ 。<br>本着不重复造轮子的心态，Rinne尝试在线搜索开花算法的代码，但是找到的却都是时间复杂度为 $O(V^3)$ 的实现方式。玖音只好自己写出一份代码，对一道例题跑出结果，然后请你检验她的答案对不对。<br>玖音的题目是这样的：<br>给出一张点集为 $V$，边集为 $E$ 的无向图 $G$ ，点的编号为0至 $|V|-1$ ，边 $(u,v)$ 的权值为 $\min(u,v)$ 。一个边集 $S$ 是图的一个匹配当且仅当 $S \subseteq E$ ，且 $\forall e_1,e_2 \in S \bigwedge e_1 \neq e_2$ ，满足 $e_1,e_2$ 无公共端点。对于一个边集 $S$ ，定义 $W_S$<br>为 $S$ 中所有边的权值的集合。对于一个自然数集 $W$ ，定义 $Mex(W)$ 为最小的不属于 $W$ 的自然数。求对于图 $G$ 的匹配 $S$ ， $Mex(W_S)$ 的最大值是多少。<br>好心的Rinne为了减少你的负担，将题目的做法告诉了你，你只需要实现一个高效的开花算法即可。当然，如果你已经会做这道题了，就可以不用继续看下去了。Rinne给出的做法是这样的：<br>对于所有的边 $e \in E$ ，若其原本的边权为 $w$ ，将其改为 $2^{|V|-w}$ 。求出新图的最大权匹配后，设其权值之和为 $X$ ，将其二进制表示中的最低 $|V|+1$ 位由高位到低位依次写出来，第一个为0的位的出现位置（从0开始编号）就是答案。要想证明正确性又要花费一些时间，不过Rinne是不会骗你的。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>第一行两个整数 $n,m(1 \le n \le 10 ^4, 1 \le m \le 2 \times 10^4)$ ，分别代表图的点数与边数。<br>接下来m行，每行两个整数 $u_i,v_i(0 \le u_i,v_i &lt; n)$ ，代表有一条连接 $u_i, v_i$ 的边。保证没有重边和自环。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>输出共一行一个整数，代表 $Mex(W_S)$ 的最大值。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>5 10<br>3 1<br>4 0<br>1 4<br>0 3<br>1 2<br>2 3<br>0 1<br>4 2<br>4 3<br>0 2</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>2</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>给一个无向带权图，权值是两个节点的编号中的较小值。设S是该图的某个匹配的边权集合，那么 $Mer(S)$就是S中没有的最小自然数。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>显然这不是传统的一般图最大权匹配，注意到答案具有单调性，二分答案，则原图相当于二分图，将小于ans放在左边，其他放在右边：左图显然不能和左边匹配，否则矛盾，右边可以和右边匹配，但是不影响答案，所以只剩下左边匹配右边了。每次跑个HK就行了。时间复杂度 $O(\log n nm)$ ，其实还可以nm的，因为不用二分，每次将点从右边移到左边就行，这里就不深入了。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e4</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;G[MAXN];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; Real[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> uN;</span><br><span class="line"><span class="keyword">int</span> Mx[MAXN],My[MAXN];</span><br><span class="line"><span class="keyword">int</span> dx[MAXN],dy[MAXN];</span><br><span class="line"><span class="keyword">int</span> dis;</span><br><span class="line"><span class="keyword">bool</span> used[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SearchP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">    dis = INF;</span><br><span class="line">    <span class="built_in">memset</span>(dx,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dx));</span><br><span class="line">    <span class="built_in">memset</span>(dy,<span class="number">-1</span>,<span class="keyword">sizeof</span>(dy));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; uN; i++)</span><br><span class="line">        <span class="keyword">if</span>(Mx[i] == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Q.push(i);</span><br><span class="line">            dx[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u = Q.front();</span><br><span class="line">        Q.pop();</span><br><span class="line">        <span class="keyword">if</span>(dx[u] &gt; dis)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">int</span> sz = G[u].size();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = G[u][i];</span><br><span class="line">            <span class="keyword">if</span>(dy[v] == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dy[v] = dx[u] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(My[v] == <span class="number">-1</span>)</span><br><span class="line">                    dis = dy[v];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    dx[My[v]] = dy[v] + <span class="number">1</span>;</span><br><span class="line">                    Q.push(My[v]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis != INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz = G[u].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = G[u][i];</span><br><span class="line">        <span class="keyword">if</span>(!used[v] &amp;&amp; dy[v] == dx[u] + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            used[v] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(My[v] != <span class="number">-1</span> &amp;&amp; dy[v] == dis)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(My[v] == <span class="number">-1</span> || DFS(My[v]))</span><br><span class="line">            &#123;</span><br><span class="line">                My[v] = u;</span><br><span class="line">                Mx[u] = v;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MaxMatch</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(Mx,<span class="number">-1</span>,<span class="keyword">sizeof</span>(Mx));</span><br><span class="line">    <span class="built_in">memset</span>(My,<span class="number">-1</span>,<span class="keyword">sizeof</span>(My));</span><br><span class="line">    <span class="keyword">while</span>(SearchP())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(used,<span class="literal">false</span>,<span class="keyword">sizeof</span>(used));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; uN; i++)</span><br><span class="line">            <span class="keyword">if</span>(Mx[i] == <span class="number">-1</span> &amp;&amp; DFS(i))</span><br><span class="line">                res++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//const int maxn = 2e4+7;</span></span><br><span class="line"><span class="comment">//vector&lt;int&gt; G[maxn];</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>&#123;Real[u].push_back(v);&#125;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    uN = x;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) G[i].clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> tmp:Real[i])</span><br><span class="line">            <span class="keyword">if</span>(tmp&gt;=x)</span><br><span class="line">                G[i].push_back(tmp-x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = MaxMatch();</span><br><span class="line">    <span class="keyword">return</span> ans == x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i) G[i].clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">        addedge(u, v);addedge(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">0</span>, R = n<span class="number">-1</span>, mid, ans;</span><br><span class="line">    <span class="keyword">while</span>(L&lt;R)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (L+R)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(chk(mid)) L = mid + <span class="number">1</span>, ans = mid;</span><br><span class="line">        <span class="keyword">else</span> R = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;为了拯救重要之人，御原玖音和Rinne Ohara都努力地进行时间机器的研究，为此她们正在
      
    
    </summary>
    
    
      <category term="二分" scheme="http://aoudad.cn/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="二分图匹配" scheme="http://aoudad.cn/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Camp Day8 A Aqous</title>
    <link href="http://aoudad.cn/2019/01/30/Camp-Day8-A-Aqous/"/>
    <id>http://aoudad.cn/2019/01/30/Camp-Day8-A-Aqous/</id>
    <published>2019-01-30T03:03:58.000Z</published>
    <updated>2019-01-30T03:47:27.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>Aqours 正在 LoveLive! 决赛中表演，舞台可以看作是一棵 $n$ 个点的有根树，其中根节点是 1 号点，$i$ 号点的父亲节点为 $p_i$ ，保证 $1 \le p_i &lt; i$ ，而且对于 $2 \le i &lt; j $\le n^2$ 有 $p_i \le p_j$ 。<br>其中的叶子节点（定义为没有孩子节点的点）是与粉丝进行互动的节点，Aqours 会在这些叶子节点之间走动来与更多的粉丝互动，但是她们又要唱歌又要跳舞，要尽快节省走动时间，然后也要做到雨露均沾，所以每次要往编号更小的叶子节点走。<br>所以 Aqours 想知道对于每一个叶子节点 $u$ ，离它最近的编号 $&lt;u$ 的叶子节点到它的距离是多少，若不存在则视距离为 -1。</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>第一行一个正整数 n ( $1 \le n \le 3 \times 10^6$ )，表示树的大小。<br>第二行 $n-1$ 个正整数，其中第 $i$ 个数表示 $p_{i+1}(1 \le p_{i+1} \le i)$ 。对于 $2 \le i &lt; j \le n^2$ ，保证 $p_i \le p_j$  。</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>每个叶子对应的答案输出一行。每行第一个数是叶子节点的编号 $u$，第二个数是离他最近的编号 $&lt;u$ 的叶子节点到它的距离，若不存在则输出 -1。<br>要求按叶子节点编号从小到大输出。</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>10<br>1 1 1 1 2 4 5 6 7</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>3 -1<br>8 3<br>9 4<br>10 4</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>按BFS序给出一个树，求出每个叶子节点到所有标号比他小的叶子节点的最小距离，其中距离就是常规的树的路径的距离。如果不存在就输出-1.</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>显然是按BFS序给出这个树的，所以可以知道编号小的叶子节点的深度绝对不会大于标号比它大的节点。对每个节点 $u$ 维护一个值 $dis(u)$ 表示离u最近的叶子节点到他的距离。初始时每个dis初始化为0， $dis(0)$ 初始化为INF。按照从小到大的顺序枚举每个叶子节点，然后从每个叶子节点一直往上更新dis(f(u))，同时将访问到的节点塞进栈里，直到某个节点的dis曾经被更新过。然后该节点的答案就是往上跳的步数加上这个节点的dis值。由于所有比目前的叶子节点标号都小的叶子节点都已经访问过了，所以目前跳到的答案一定是最优的。而往下更新的原因是因为可能比较浅的节点到该节点的距离更小。需要注意的是这里最好用数组模拟栈，用自带的栈我一直TLE。感觉效率差了一个数量级。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ull unsigned long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> db double</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> what_is(x) cerr &lt;&lt;  <span class="meta-string">"Line "</span> &lt;&lt; __LINE__ &lt;&lt; <span class="meta-string">": "</span> &lt;&lt; #x &lt;&lt; <span class="meta-string">" is "</span> &lt;&lt; (x) &lt;&lt; endl;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> suf_zero(x) __builtin_ffs(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pre_zero(x) __builtin_clz(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> num_one(x) __builtin_popcount(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-keyword">error</span>(args...) &#123; string _s = #args; replace(_s.begin(), _s.end(), <span class="meta-string">','</span>, <span class="meta-string">' '</span>); stringstream _ss(_s); istream_iterator<span class="meta-string">&lt;string&gt; _it(_ss); err(_it, args); &#125;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mt make_tuple</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> eb emplace_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFI 2000000009</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INFLL (ll)1e18+7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ig ignore</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TP tuple<span class="meta-string">&lt;int, int, int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l, m, rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1, r, rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;</span></span></span><br><span class="line"><span class="comment">//#define rep(i, begin, end) for(__typeof(end) i =(begin)-((begin)&gt;(end));i!=(end)-((begin)&gt;(end));i+=1-2*((begin)&gt;(end)))</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it)</span> </span>&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="built_in">endl</span>;&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">err</span><span class="params">(istream_iterator&lt;<span class="built_in">string</span>&gt; it, T a, Args... args)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cerr</span> &lt;&lt; *it &lt;&lt; <span class="string">" = "</span> &lt;&lt; a &lt;&lt; <span class="string">" , "</span>;</span><br><span class="line">err(++it, args...);</span><br><span class="line">&#125;<span class="comment">// fast IO</span></span><br><span class="line"><span class="keyword">namespace</span> fastIO</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> BUF_SIZE 100000</span></span><br><span class="line"><span class="comment">//     fread -&gt; read</span></span><br><span class="line">    <span class="keyword">bool</span> IOerror = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">char</span> buf[BUF_SIZE], *p1 = buf+BUF_SIZE,</span><br><span class="line">         *pend = buf+BUF_SIZE;</span><br><span class="line">         <span class="keyword">if</span>(p1==pend)&#123;</span><br><span class="line">             p1 = buf;</span><br><span class="line">             pend = buf+fread(buf, <span class="number">1</span>, BUF_SIZE, <span class="built_in">stdin</span>);</span><br><span class="line">             <span class="keyword">if</span>(pend==p1)&#123;</span><br><span class="line">                 IOerror = <span class="number">1</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> *p1++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">blank</span><span class="params">( <span class="keyword">char</span> ch )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ch==<span class="string">' '</span>||ch==<span class="string">'\n'</span>||ch==<span class="string">'\r'</span>||ch==<span class="string">'\t'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(<span class="keyword">int</span> &amp;x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="keyword">while</span>(blank(ch=nc()));</span><br><span class="line">        <span class="keyword">if</span>(IOerror)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">for</span>(x=ch-<span class="string">'0'</span>;(ch=nc())&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> BUF_SIZE</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> fastIO;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-8</span>;</span><br><span class="line"><span class="comment">///////// Macro ////////////////</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4e6</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> p[maxn], tag[maxn], ans[maxn], isp[maxn];</span><br><span class="line"><span class="keyword">int</span> st[maxn], tot=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> aoaoao</span></span><br><span class="line">        freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">        freopen(<span class="string">"out.txt"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// aoaoao</span></span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i) &#123;<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]); isp[p[i]] = <span class="number">1</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"1 -1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tag[<span class="number">0</span>]=INFI;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t = p[i], cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(isp[i])<span class="keyword">continue</span>;</span><br><span class="line">        st[tot++] = t;</span><br><span class="line">        <span class="keyword">while</span>(tag[t]==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cnt++;</span><br><span class="line">            tag[t] = cnt;</span><br><span class="line">            t = p[t];</span><br><span class="line">            st[tot++] = t;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[i] = cnt + tag[t] + <span class="number">1</span>;</span><br><span class="line">        tag[t] = min(tag[t], cnt+<span class="number">1</span>);</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(tot)</span><br><span class="line">        &#123;</span><br><span class="line">            tag[st[tot<span class="number">-1</span>]] = min(tag[st[tot<span class="number">-1</span>]], tag[t] + cnt);</span><br><span class="line">            ++cnt;</span><br><span class="line">            --tot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(isp[i]) <span class="keyword">continue</span>;;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]&gt;=INFI) &#123;<span class="built_in">printf</span>(<span class="string">"%d -1\n"</span>, i);<span class="keyword">continue</span>;&#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;Aqours 正在 LoveLive! 决赛中表演，舞台可以看作是一棵 $n$ 个点的有根
      
    
    </summary>
    
    
      <category term="思维" scheme="http://aoudad.cn/tags/%E6%80%9D%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>JRY&#39;s_Geo</title>
    <link href="http://aoudad.cn/2019/01/25/JRY-s-Geo/"/>
    <id>http://aoudad.cn/2019/01/25/JRY-s-Geo/</id>
    <published>2019-01-25T07:54:30.000Z</published>
    <updated>2019-01-25T07:55:18.692Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>吉老师的计算几何板子</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">const</span> db eps=<span class="number">1e-6</span>;</span><br><span class="line"><span class="keyword">const</span> db pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sign</span><span class="params">(db k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k&gt;eps) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">else</span> <span class="keyword">if</span> (k&lt;-eps) <span class="keyword">return</span> <span class="number">-1</span>; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(db k1,db k2)</span></span>&#123;<span class="keyword">return</span> sign(k1-k2);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inmid</span><span class="params">(db k1,db k2,db k3)</span></span>&#123;<span class="keyword">return</span> sign(k1-k3)*sign(k2-k3)&lt;=<span class="number">0</span>;&#125;<span class="comment">// k3 在 [k1,k2] 内 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    db x,y;</span><br><span class="line">    point <span class="keyword">operator</span> + (<span class="keyword">const</span> point &amp;k1) <span class="keyword">const</span>&#123;<span class="keyword">return</span> (point)&#123;k1.x+x,k1.y+y&#125;;&#125;</span><br><span class="line">    point <span class="keyword">operator</span> - (<span class="keyword">const</span> point &amp;k1) <span class="keyword">const</span>&#123;<span class="keyword">return</span> (point)&#123;x-k1.x,y-k1.y&#125;;&#125;</span><br><span class="line">    point <span class="keyword">operator</span> * (db k1) <span class="keyword">const</span>&#123;<span class="keyword">return</span> (point)&#123;x*k1,y*k1&#125;;&#125;</span><br><span class="line">    point <span class="keyword">operator</span> / (db k1) <span class="keyword">const</span>&#123;<span class="keyword">return</span> (point)&#123;x/k1,y/k1&#125;;&#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> point &amp;k1) <span class="keyword">const</span>&#123;<span class="keyword">return</span> cmp(x,k1.x)==<span class="number">0</span>&amp;&amp;cmp(y,k1.y)==<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="comment">// 逆时针旋转 </span></span><br><span class="line">    <span class="function">point <span class="title">turn</span><span class="params">(db k1)</span></span>&#123;<span class="keyword">return</span> (point)&#123;x*<span class="built_in">cos</span>(k1)-y*<span class="built_in">sin</span>(k1),x*<span class="built_in">sin</span>(k1)+y*<span class="built_in">cos</span>(k1)&#125;;&#125;</span><br><span class="line">    <span class="function">point <span class="title">turn90</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (point)&#123;-y,x&#125;;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> point k1) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=cmp(x,k1.x);</span><br><span class="line">        <span class="keyword">if</span> (a==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">else</span> <span class="keyword">if</span> (a==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">return</span> cmp(y,k1.y)==<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">db <span class="title">abs</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y);&#125;</span><br><span class="line">    <span class="function">db <span class="title">abs2</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> x*x+y*y;&#125;</span><br><span class="line">    <span class="function">db <span class="title">dis</span><span class="params">(point k1)</span></span>&#123;<span class="keyword">return</span> ((*<span class="keyword">this</span>)-k1).<span class="built_in">abs</span>();&#125;</span><br><span class="line">    <span class="function">point <span class="title">unit</span><span class="params">()</span></span>&#123;db w=<span class="built_in">abs</span>(); <span class="keyword">return</span> (point)&#123;x/w,y/w&#125;;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span></span>&#123;<span class="keyword">double</span> k1,k2; <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;k1,&amp;k2); x=k1; y=k2;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"%.11lf %.11lf\n"</span>,x,y);&#125;</span><br><span class="line">    <span class="function">db <span class="title">getw</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">atan2</span>(y,x);&#125; </span><br><span class="line">    <span class="function">point <span class="title">getdel</span><span class="params">()</span></span>&#123;<span class="keyword">if</span> (sign(x)==<span class="number">-1</span>||(sign(x)==<span class="number">0</span>&amp;&amp;sign(y)==<span class="number">-1</span>)) <span class="keyword">return</span> (*<span class="keyword">this</span>)*(<span class="number">-1</span>); <span class="keyword">else</span> <span class="keyword">return</span> (*<span class="keyword">this</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getP</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;<span class="keyword">return</span> sign(y)==<span class="number">1</span>||(sign(y)==<span class="number">0</span>&amp;&amp;sign(x)==<span class="number">-1</span>);&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inmid</span><span class="params">(point k1,point k2,point k3)</span></span>&#123;<span class="keyword">return</span> inmid(k1.x,k2.x,k3.x)&amp;&amp;inmid(k1.y,k2.y,k3.y);&#125;</span><br><span class="line"><span class="function">db <span class="title">cross</span><span class="params">(point k1,point k2)</span></span>&#123;<span class="keyword">return</span> k1.x*k2.y-k1.y*k2.x;&#125;</span><br><span class="line"><span class="function">db <span class="title">dot</span><span class="params">(point k1,point k2)</span></span>&#123;<span class="keyword">return</span> k1.x*k2.x+k1.y*k2.y;&#125;</span><br><span class="line"><span class="function">db <span class="title">rad</span><span class="params">(point k1,point k2)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">atan2</span>(cross(k1,k2),dot(k1,k2));&#125;</span><br><span class="line"><span class="comment">// -pi -&gt; pi</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compareangle</span> <span class="params">(point k1,point k2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> k1.getP()&lt;k2.getP()||(k1.getP()==k2.getP()&amp;&amp;sign(cross(k1,k2))&gt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">point <span class="title">proj</span><span class="params">(point k1,point k2,point q)</span></span>&#123; <span class="comment">// q 到直线 k1,k2 的投影 </span></span><br><span class="line">    point k=k2-k1; <span class="keyword">return</span> k1+k*(dot(q-k1,k)/k.abs2());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">point <span class="title">reflect</span><span class="params">(point k1,point k2,point q)</span></span>&#123;<span class="keyword">return</span> proj(k1,k2,q)*<span class="number">2</span>-q;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clockwise</span><span class="params">(point k1,point k2,point k3)</span></span>&#123;<span class="comment">// k1 k2 k3 逆时针 1 顺时针 -1 否则 0  </span></span><br><span class="line">    <span class="keyword">return</span> sign(cross(k2-k1,k3-k1));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkLL</span><span class="params">(point k1,point k2,point k3,point k4)</span></span>&#123;<span class="comment">// 求直线 (L) 线段 (S)k1,k2 和 k3,k4 的交点 </span></span><br><span class="line">    <span class="keyword">return</span> cmp(cross(k3-k1,k4-k1),cross(k3-k2,k4-k2))!=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">point <span class="title">getLL</span><span class="params">(point k1,point k2,point k3,point k4)</span></span>&#123;</span><br><span class="line">    db w1=cross(k1-k3,k4-k3),w2=cross(k4-k3,k2-k3); <span class="keyword">return</span> (k1*w2+k2*w1)/(w1+w2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">intersect</span><span class="params">(db l1,db r1,db l2,db r2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l1&gt;r1) swap(l1,r1); <span class="keyword">if</span> (l2&gt;r2) swap(l2,r2); <span class="keyword">return</span> cmp(r1,l2)!=<span class="number">-1</span>&amp;&amp;cmp(r2,l1)!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkSS</span><span class="params">(point k1,point k2,point k3,point k4)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> intersect(k1.x,k2.x,k3.x,k4.x)&amp;&amp;intersect(k1.y,k2.y,k3.y,k4.y)&amp;&amp;</span><br><span class="line">    sign(cross(k3-k1,k4-k1))*sign(cross(k3-k2,k4-k2))&lt;=<span class="number">0</span>&amp;&amp;</span><br><span class="line">    sign(cross(k1-k3,k2-k3))*sign(cross(k1-k4,k2-k4))&lt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">disSP</span><span class="params">(point k1,point k2,point q)</span></span>&#123;</span><br><span class="line">    point k3=proj(k1,k2,q);</span><br><span class="line">    <span class="keyword">if</span> (inmid(k1,k2,k3)) <span class="keyword">return</span> q.dis(k3); <span class="keyword">else</span> <span class="keyword">return</span> min(q.dis(k1),q.dis(k2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">disSS</span><span class="params">(point k1,point k2,point k3,point k4)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (checkSS(k1,k2,k3,k4)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> min(min(disSP(k1,k2,k3),disSP(k1,k2,k4)),min(disSP(k3,k4,k1),disSP(k3,k4,k2)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">onS</span><span class="params">(point k1,point k2,point q)</span></span>&#123;<span class="keyword">return</span> inmid(k1,k2,q)&amp;&amp;sign(cross(k1-q,k2-k1))==<span class="number">0</span>;&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">circle</span>&#123;</span></span><br><span class="line">    point o; db r;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span></span>&#123;o.scan(); <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;r);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">inside</span><span class="params">(point k)</span></span>&#123;<span class="keyword">return</span> cmp(r,o.dis(k));&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">line</span>&#123;</span></span><br><span class="line">    <span class="comment">// p[0]-&gt;p[1]</span></span><br><span class="line">    point p[<span class="number">2</span>];</span><br><span class="line">    line(point k1,point k2)&#123;p[<span class="number">0</span>]=k1; p[<span class="number">1</span>]=k2;&#125;</span><br><span class="line">    point&amp; <span class="keyword">operator</span> [] (<span class="keyword">int</span> k)&#123;<span class="keyword">return</span> p[k];&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">include</span><span class="params">(point k)</span></span>&#123;<span class="keyword">return</span> sign(cross(p[<span class="number">1</span>]-p[<span class="number">0</span>],k-p[<span class="number">0</span>]))&gt;<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="function">point <span class="title">dir</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> p[<span class="number">1</span>]-p[<span class="number">0</span>];&#125;</span><br><span class="line">    <span class="function">line <span class="title">push</span><span class="params">()</span></span>&#123; <span class="comment">// 向外 ( 左手边 ) 平移 eps </span></span><br><span class="line">        <span class="keyword">const</span> db eps = <span class="number">1e-6</span>;</span><br><span class="line">        point delta=(p[<span class="number">1</span>]-p[<span class="number">0</span>]).turn90().unit()*eps;</span><br><span class="line">        <span class="keyword">return</span> &#123;p[<span class="number">0</span>]-delta,p[<span class="number">1</span>]-delta&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">point <span class="title">getLL</span><span class="params">(line k1,line k2)</span></span>&#123;<span class="keyword">return</span> getLL(k1[<span class="number">0</span>],k1[<span class="number">1</span>],k2[<span class="number">0</span>],k2[<span class="number">1</span>]);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">parallel</span><span class="params">(line k1,line k2)</span></span>&#123;<span class="keyword">return</span> sign(cross(k1.dir(),k2.dir()))==<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sameDir</span><span class="params">(line k1,line k2)</span></span>&#123;<span class="keyword">return</span> parallel(k1,k2)&amp;&amp;sign(dot(k1.dir(),k2.dir()))==<span class="number">1</span>;&#125;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span> &lt; (line k1,line k2)&#123;</span><br><span class="line">    <span class="keyword">if</span> (sameDir(k1,k2)) <span class="keyword">return</span> k2.include(k1[<span class="number">0</span>]); </span><br><span class="line">    <span class="keyword">return</span> compareangle(k1.dir(),k2.dir());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkpos</span><span class="params">(line k1,line k2,line k3)</span></span>&#123;<span class="keyword">return</span> k3.include(getLL(k1,k2));&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;line&gt; getHL(<span class="built_in">vector</span>&lt;line&gt; &amp;L)&#123; <span class="comment">// 求半平面交 , 半平面是逆时针方向 , 输出按照逆时针</span></span><br><span class="line">    sort(L.begin(),L.end()); <span class="built_in">deque</span>&lt;line&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(<span class="keyword">int</span>)L.size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i&amp;&amp;sameDir(L[i],L[i<span class="number">-1</span>])) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">while</span> (q.size()&gt;<span class="number">1</span>&amp;&amp;!checkpos(q[q.size()<span class="number">-2</span>],q[q.size()<span class="number">-1</span>],L[i])) q.pop_back();</span><br><span class="line">        <span class="keyword">while</span> (q.size()&gt;<span class="number">1</span>&amp;&amp;!checkpos(q[<span class="number">1</span>],q[<span class="number">0</span>],L[i])) q.pop_front();</span><br><span class="line">        q.push_back(L[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (q.size()&gt;<span class="number">2</span>&amp;&amp;!checkpos(q[q.size()<span class="number">-2</span>],q[q.size()<span class="number">-1</span>],q[<span class="number">0</span>])) q.pop_back();</span><br><span class="line">    <span class="keyword">while</span> (q.size()&gt;<span class="number">2</span>&amp;&amp;!checkpos(q[<span class="number">1</span>],q[<span class="number">0</span>],q[q.size()<span class="number">-1</span>])) q.pop_front();</span><br><span class="line">    <span class="built_in">vector</span>&lt;line&gt;ans; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;q.size();i++) ans.push_back(q[i]);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">closepoint</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt;&amp;A,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123; <span class="comment">// 最近点对 , 先要按照 x 坐标排序 </span></span><br><span class="line">    <span class="keyword">if</span> (r-l&lt;=<span class="number">5</span>)&#123;</span><br><span class="line">        db ans=<span class="number">1e20</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++) <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=r;j++) ans=min(ans,A[i].dis(A[j]));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; db ans=min(closepoint(A,l,mid),closepoint(A,mid+<span class="number">1</span>,r));</span><br><span class="line">    <span class="built_in">vector</span>&lt;point&gt;B; <span class="keyword">for</span> (<span class="keyword">int</span> i=l;i&lt;=r;i++) <span class="keyword">if</span> (<span class="built_in">abs</span>(A[i].x-A[mid].x)&lt;=ans) B.push_back(A[i]);</span><br><span class="line">    sort(B.begin(),B.end(),[](point k1,point k2)&#123;<span class="keyword">return</span> k1.y&lt;k2.y;&#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.size();i++) <span class="keyword">for</span> (<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;B.size()&amp;&amp;B[j].y-B[i].y&lt;ans;j++) ans=min(ans,B[i].dis(B[j]));</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkposCC</span><span class="params">(circle k1,circle k2)</span></span>&#123;<span class="comment">// 返回两个圆的公切线数量</span></span><br><span class="line">    <span class="keyword">if</span> (cmp(k1.r,k2.r)==<span class="number">-1</span>) swap(k1,k2);</span><br><span class="line">    db dis=k1.o.dis(k2.o);  <span class="keyword">int</span> w1=cmp(dis,k1.r+k2.r),w2=cmp(dis,k1.r-k2.r);</span><br><span class="line">    <span class="keyword">if</span> (w1&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">4</span>; <span class="keyword">else</span> <span class="keyword">if</span> (w1==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">3</span>; <span class="keyword">else</span> <span class="keyword">if</span> (w2&gt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>; </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (w2==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt; getCL(circle k1,point k2,point k3)&#123; <span class="comment">// 沿着 k2-&gt;k3 方向给出 , 相切给出两个 </span></span><br><span class="line">    point k=proj(k2,k3,k1.o); db d=k1.r*k1.r-(k-k1.o).abs2();</span><br><span class="line">    <span class="keyword">if</span> (sign(d)==<span class="number">-1</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    point del=(k3-k2).unit()*<span class="built_in">sqrt</span>(max((db)<span class="number">0.0</span>,d)); <span class="keyword">return</span> &#123;k-del,k+del&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt; getCC(circle k1,circle k2)&#123;<span class="comment">// 沿圆 k1 逆时针给出 , 相切给出两个 </span></span><br><span class="line">    <span class="keyword">int</span> pd=checkposCC(k1,k2); <span class="keyword">if</span> (pd==<span class="number">0</span>||pd==<span class="number">4</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    db a=(k2.o-k1.o).abs2(),cosA=(k1.r*k1.r+a-k2.r*k2.r)/(<span class="number">2</span>*k1.r*<span class="built_in">sqrt</span>(max(a,(db)<span class="number">0.0</span>)));</span><br><span class="line">    db b=k1.r*cosA,c=<span class="built_in">sqrt</span>(max((db)<span class="number">0.0</span>,k1.r*k1.r-b*b));</span><br><span class="line">    point k=(k2.o-k1.o).unit(),m=k1.o+k*b,del=k.turn90()*c;</span><br><span class="line">    <span class="keyword">return</span> &#123;m-del,m+del&#125;;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt; TangentCP(circle k1,point k2)&#123;<span class="comment">// 沿圆 k1 逆时针给出 </span></span><br><span class="line">    db a=(k2-k1.o).<span class="built_in">abs</span>(),b=k1.r*k1.r/a,c=<span class="built_in">sqrt</span>(max((db)<span class="number">0.0</span>,k1.r*k1.r-b*b));</span><br><span class="line">    point k=(k2-k1.o).unit(),m=k1.o+k*b,del=k.turn90()*c;</span><br><span class="line">    <span class="keyword">return</span> &#123;m-del,m+del&#125;;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">vector</span>&lt;line&gt; TangentoutCC(circle k1,circle k2)&#123;</span><br><span class="line">    <span class="keyword">int</span> pd=checkposCC(k1,k2); <span class="keyword">if</span> (pd==<span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;; </span><br><span class="line">    <span class="keyword">if</span> (pd==<span class="number">1</span>)&#123;point k=getCC(k1,k2)[<span class="number">0</span>]; <span class="keyword">return</span> &#123;(line)&#123;k,k&#125;&#125;;&#125;</span><br><span class="line">    <span class="keyword">if</span> (cmp(k1.r,k2.r)==<span class="number">0</span>)&#123;</span><br><span class="line">        point del=(k2.o-k1.o).unit().turn90().getdel();</span><br><span class="line">        <span class="keyword">return</span> &#123;(line)&#123;k1.o-del*k1.r,k2.o-del*k2.r&#125;,(line)&#123;k1.o+del*k1.r,k2.o+del*k2.r&#125;&#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        point p=(k2.o*k1.r-k1.o*k2.r)/(k1.r-k2.r);</span><br><span class="line">        <span class="built_in">vector</span>&lt;point&gt;A=TangentCP(k1,p),B=TangentCP(k2,p);</span><br><span class="line">        <span class="built_in">vector</span>&lt;line&gt;ans; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();i++) ans.push_back((line)&#123;A[i],B[i]&#125;); </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;line&gt; TangentinCC(circle k1,circle k2)&#123;</span><br><span class="line">    <span class="keyword">int</span> pd=checkposCC(k1,k2); <span class="keyword">if</span> (pd&lt;=<span class="number">2</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (pd==<span class="number">3</span>)&#123;point k=getCC(k1,k2)[<span class="number">0</span>]; <span class="keyword">return</span> &#123;(line)&#123;k,k&#125;&#125;;&#125; </span><br><span class="line">    point p=(k2.o*k1.r+k1.o*k2.r)/(k1.r+k2.r);</span><br><span class="line">    <span class="built_in">vector</span>&lt;point&gt;A=TangentCP(k1,p),B=TangentCP(k2,p);</span><br><span class="line">    <span class="built_in">vector</span>&lt;line&gt;ans; <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();i++) ans.push_back((line)&#123;A[i],B[i]&#125;); </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;line&gt; TangentCC(circle k1,circle k2)&#123;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>; <span class="keyword">if</span> (k1.r&lt;k2.r) swap(k1,k2),flag=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;line&gt;A=TangentoutCC(k1,k2),B=TangentinCC(k1,k2);</span><br><span class="line">    <span class="keyword">for</span> (line k:B) A.push_back(k); </span><br><span class="line">    <span class="keyword">if</span> (flag) <span class="keyword">for</span> (line &amp;k:A) swap(k[<span class="number">0</span>],k[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">getarea</span><span class="params">(circle k1,point k2,point k3)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 圆 k1 与三角形 k2 k3 k1.o 的有向面积交</span></span><br><span class="line">    point k=k1.o; k1.o=k1.o-k; k2=k2-k; k3=k3-k;</span><br><span class="line">    <span class="keyword">int</span> pd1=k1.inside(k2),pd2=k1.inside(k3); </span><br><span class="line">    <span class="built_in">vector</span>&lt;point&gt;A=getCL(k1,k2,k3);</span><br><span class="line">    <span class="keyword">if</span> (pd1&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (pd2&gt;=<span class="number">0</span>) <span class="keyword">return</span> cross(k2,k3)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> k1.r*k1.r*rad(A[<span class="number">1</span>],k3)/<span class="number">2</span>+cross(k2,A[<span class="number">1</span>])/<span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pd2&gt;=<span class="number">0</span>)&#123; </span><br><span class="line">        <span class="keyword">return</span> k1.r*k1.r*rad(k2,A[<span class="number">0</span>])/<span class="number">2</span>+cross(A[<span class="number">0</span>],k3)/<span class="number">2</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> pd=cmp(k1.r,disSP(k2,k3,k1.o));</span><br><span class="line">        <span class="keyword">if</span> (pd&lt;=<span class="number">0</span>) <span class="keyword">return</span> k1.r*k1.r*rad(k2,k3)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> cross(A[<span class="number">0</span>],A[<span class="number">1</span>])/<span class="number">2</span>+k1.r*k1.r*(rad(k2,A[<span class="number">0</span>])+rad(A[<span class="number">1</span>],k3))/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">circle <span class="title">getcircle</span><span class="params">(point k1,point k2,point k3)</span></span>&#123;</span><br><span class="line">    db a1=k2.x-k1.x,b1=k2.y-k1.y,c1=(a1*a1+b1*b1)/<span class="number">2</span>;</span><br><span class="line">    db a2=k3.x-k1.x,b2=k3.y-k1.y,c2=(a2*a2+b2*b2)/<span class="number">2</span>;</span><br><span class="line">    db d=a1*b2-a2*b1;</span><br><span class="line">    point o=(point)&#123;k1.x+(c1*b2-c2*b1)/d,k1.y+(a1*c2-a2*c1)/d&#125;;</span><br><span class="line">    <span class="keyword">return</span> (circle)&#123;o,k1.dis(o)&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">circle <span class="title">getScircle</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt; A)</span></span>&#123;</span><br><span class="line">    random_shuffle(A.begin(),A.end());</span><br><span class="line">    circle ans=(circle)&#123;A[<span class="number">0</span>],<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;A.size();i++)</span><br><span class="line">        <span class="keyword">if</span> (ans.inside(A[i])==<span class="number">-1</span>)&#123;</span><br><span class="line">            ans=(circle)&#123;A[i],<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)</span><br><span class="line">                <span class="keyword">if</span> (ans.inside(A[j])==<span class="number">-1</span>)&#123;</span><br><span class="line">                    ans.o=(A[i]+A[j])/<span class="number">2</span>; ans.r=ans.o.dis(A[i]);</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;k++)</span><br><span class="line">                        <span class="keyword">if</span> (ans.inside(A[k])==<span class="number">-1</span>)</span><br><span class="line">                            ans=getcircle(A[i],A[j],A[k]);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">area</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt; A)</span></span>&#123; <span class="comment">// 多边形用 vector&lt;point&gt; 表示 , 逆时针 </span></span><br><span class="line">    db ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();i++) ans+=cross(A[i],A[(i+<span class="number">1</span>)%A.size()]);</span><br><span class="line">    <span class="keyword">return</span> ans/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkconvex</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt;A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=A.size(); A.push_back(A[<span class="number">0</span>]); A.push_back(A[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span> (sign(cross(A[i+<span class="number">1</span>]-A[i],A[i+<span class="number">2</span>]-A[i]))==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">contain</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt;A,point q)</span></span>&#123; <span class="comment">// 2 内部 1 边界 0 外部</span></span><br><span class="line">    <span class="keyword">int</span> pd=<span class="number">0</span>; A.push_back(A[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;A.size();i++)&#123;</span><br><span class="line">        point u=A[i<span class="number">-1</span>],v=A[i];</span><br><span class="line">        <span class="keyword">if</span> (onS(u,v,q)) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">if</span> (cmp(u.y,v.y)&gt;<span class="number">0</span>) swap(u,v);</span><br><span class="line">        <span class="keyword">if</span> (cmp(u.y,q.y)&gt;=<span class="number">0</span>||cmp(v.y,q.y)&lt;<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (sign(cross(u-v,q-v))&lt;<span class="number">0</span>) pd^=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pd&lt;&lt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt; ConvexHull(<span class="built_in">vector</span>&lt;point&gt;A,<span class="keyword">int</span> flag=<span class="number">1</span>)&#123; <span class="comment">// flag=0 不严格 flag=1 严格 </span></span><br><span class="line">    <span class="keyword">int</span> n=A.size(); <span class="built_in">vector</span>&lt;point&gt;ans(n*<span class="number">2</span>); </span><br><span class="line">    sort(A.begin(),A.end()); <span class="keyword">int</span> now=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();i++)&#123;</span><br><span class="line">        <span class="keyword">while</span> (now&gt;<span class="number">0</span>&amp;&amp;sign(cross(ans[now]-ans[now<span class="number">-1</span>],A[i]-ans[now<span class="number">-1</span>]))&lt;flag) now--;</span><br><span class="line">        ans[++now]=A[i];</span><br><span class="line">    &#125; <span class="keyword">int</span> pre=now;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span> (now&gt;pre&amp;&amp;sign(cross(ans[now]-ans[now<span class="number">-1</span>],A[i]-ans[now<span class="number">-1</span>]))&lt;flag) now--;</span><br><span class="line">        ans[++now]=A[i];</span><br><span class="line">    &#125; ans.resize(now); <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">convexDiameter</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt;A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">0</span>,n=A.size(); db ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();i++)&#123;</span><br><span class="line">        now=max(now,i);</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">            db k1=A[i].dis(A[now%n]),k2=A[i].dis(A[(now+<span class="number">1</span>)%n]);</span><br><span class="line">            ans=max(ans,max(k1,k2)); <span class="keyword">if</span> (k2&gt;k1) now++; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;point&gt; convexcut(<span class="built_in">vector</span>&lt;point&gt;A,point k1,point k2)&#123;</span><br><span class="line">    <span class="comment">// 保留 k1,k2,p 逆时针的所有点</span></span><br><span class="line">    <span class="keyword">int</span> n=A.size(); A.push_back(A[<span class="number">0</span>]); <span class="built_in">vector</span>&lt;point&gt;ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> w1=clockwise(k1,k2,A[i]),w2=clockwise(k1,k2,A[i+<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span> (w1&gt;=<span class="number">0</span>) ans.push_back(A[i]);</span><br><span class="line">        <span class="keyword">if</span> (w1*w2&lt;<span class="number">0</span>) ans.push_back(getLL(k1,k2,A[i],A[i+<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkPoS</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt;A,point k1,point k2)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 多边形 A 和直线 ( 线段 )k1-&gt;k2 严格相交 , 注释部分为线段</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ins</span>&#123;</span></span><br><span class="line">        point m,u,v;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> ins&amp; k) <span class="keyword">const</span> &#123;<span class="keyword">return</span> m&lt;k.m;&#125;</span><br><span class="line">    &#125;; <span class="built_in">vector</span>&lt;ins&gt;B;</span><br><span class="line">    <span class="comment">//if (contain(A,k1)==2||contain(A,k2)==2) return 1;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;point&gt;poly=A; A.push_back(A[<span class="number">0</span>]); </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;A.size();i++) <span class="keyword">if</span> (checkLL(A[i<span class="number">-1</span>],A[i],k1,k2))&#123;</span><br><span class="line">        point m=getLL(A[i<span class="number">-1</span>],A[i],k1,k2); </span><br><span class="line">        <span class="keyword">if</span> (inmid(A[i<span class="number">-1</span>],A[i],m)<span class="comment">/*&amp;&amp;inmid(k1,k2,m)*/</span>) B.push_back((ins)&#123;m,A[i<span class="number">-1</span>],A[i]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (B.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; sort(B.begin(),B.end()); </span><br><span class="line">    <span class="keyword">int</span> now=<span class="number">1</span>; <span class="keyword">while</span> (now&lt;B.size()&amp;&amp;B[now].m==B[<span class="number">0</span>].m) now++; </span><br><span class="line">    <span class="keyword">if</span> (now==B.size()) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> flag=contain(poly,(B[<span class="number">0</span>].m+B[now].m)/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    point d=B[now].m-B[<span class="number">0</span>].m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=now;i&lt;B.size();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(B[i].m==B[i<span class="number">-1</span>].m)&amp;&amp;flag==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> tag=sign(cross(B[i].v-B[i].u,B[i].m+d-B[i].u));</span><br><span class="line">        <span class="keyword">if</span> (B[i].m==B[i].u||B[i].m==B[i].v) flag+=tag; <span class="keyword">else</span> flag+=tag*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//return 0;</span></span><br><span class="line">    <span class="keyword">return</span> flag==<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkinp</span><span class="params">(point r,point l,point m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (compareangle(l,r))&#123;<span class="keyword">return</span> compareangle(l,m)&amp;&amp;compareangle(m,r);&#125;</span><br><span class="line"><span class="keyword">return</span> compareangle(l,m)||compareangle(m,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">checkPosFast</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt;A,point k1,point k2)</span></span>&#123; <span class="comment">// 快速检查线段是否和多边形严格相交</span></span><br><span class="line"><span class="keyword">if</span> (contain(A,k1)==<span class="number">2</span>||contain(A,k2)==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">if</span> (k1==k2) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">A.push_back(A[<span class="number">0</span>]); A.push_back(A[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i+<span class="number">1</span>&lt;A.size();i++)</span><br><span class="line"><span class="keyword">if</span> (checkLL(A[i<span class="number">-1</span>],A[i],k1,k2))&#123;</span><br><span class="line">point now=getLL(A[i<span class="number">-1</span>],A[i],k1,k2);</span><br><span class="line"><span class="keyword">if</span> (inmid(A[i<span class="number">-1</span>],A[i],now)==<span class="number">0</span>||inmid(k1,k2,now)==<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (now==A[i])&#123;</span><br><span class="line"><span class="keyword">if</span> (A[i]==k2) <span class="keyword">continue</span>;</span><br><span class="line">point pre=A[i<span class="number">-1</span>],ne=A[i+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (checkinp(pre-now,ne-now,k2-now)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (now==k1)&#123;</span><br><span class="line"><span class="keyword">if</span> (k1==A[i<span class="number">-1</span>]||k1==A[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span> (checkinp(A[i<span class="number">-1</span>]-k1,A[i]-k1,k2-k1)) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (now==k2||now==A[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 拆分凸包成上下凸壳 凸包尽量都随机旋转一个角度来避免出现相同横坐标 </span></span><br><span class="line"><span class="comment">// 尽量特判只有一个点的情况 凸包逆时针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getUDP</span><span class="params">(<span class="built_in">vector</span>&lt;point&gt;A,<span class="built_in">vector</span>&lt;point&gt;&amp;U,<span class="built_in">vector</span>&lt;point&gt;&amp;D)</span></span>&#123;</span><br><span class="line">    db l=<span class="number">1e100</span>,r=<span class="number">-1e100</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();i++) l=min(l,A[i].x),r=max(r,A[i].x);</span><br><span class="line">    <span class="keyword">int</span> wherel,wherer;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();i++) <span class="keyword">if</span> (cmp(A[i].x,l)==<span class="number">0</span>) wherel=i;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=A.size();i;i--) <span class="keyword">if</span> (cmp(A[i<span class="number">-1</span>].x,r)==<span class="number">0</span>) wherer=i<span class="number">-1</span>;</span><br><span class="line">    U.clear(); D.clear(); <span class="keyword">int</span> now=wherel;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;D.push_back(A[now]); <span class="keyword">if</span> (now==wherer) <span class="keyword">break</span>; now++; <span class="keyword">if</span> (now&gt;=A.size()) now=<span class="number">0</span>;&#125;</span><br><span class="line">    now=wherel;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;U.push_back(A[now]); <span class="keyword">if</span> (now==wherer) <span class="keyword">break</span>; now--; <span class="keyword">if</span> (now&lt;<span class="number">0</span>) now=A.size()<span class="number">-1</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 需要保证凸包点数大于等于 3,2 内部 ,1 边界 ,0 外部</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">containCoP</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;point&gt;&amp;U,<span class="keyword">const</span> <span class="built_in">vector</span>&lt;point&gt;&amp;D,point k)</span></span>&#123;</span><br><span class="line">    db lx=U[<span class="number">0</span>].x,rx=U[U.size()<span class="number">-1</span>].x;</span><br><span class="line">    <span class="keyword">if</span> (k==U[<span class="number">0</span>]||k==U[U.size()<span class="number">-1</span>]) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (cmp(k.x,lx)==<span class="number">-1</span>||cmp(k.x,rx)==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> where1=lower_bound(U.begin(),U.end(),(point)&#123;k.x,<span class="number">-1e100</span>&#125;)-U.begin();</span><br><span class="line">    <span class="keyword">int</span> where2=lower_bound(D.begin(),D.end(),(point)&#123;k.x,<span class="number">-1e100</span>&#125;)-D.begin();</span><br><span class="line">    <span class="keyword">int</span> w1=clockwise(U[where1<span class="number">-1</span>],U[where1],k),w2=clockwise(D[where2<span class="number">-1</span>],D[where2],k);</span><br><span class="line">    <span class="keyword">if</span> (w1==<span class="number">1</span>||w2==<span class="number">-1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="keyword">else</span> <span class="keyword">if</span> (w1==<span class="number">0</span>||w2==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// d 是方向 , 输出上方切点和下方切点</span></span><br><span class="line">pair&lt;point,point&gt; getTangentCow(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;point&gt; &amp;U,<span class="keyword">const</span> <span class="built_in">vector</span>&lt;point&gt; &amp;D,point d)&#123;</span><br><span class="line">    <span class="keyword">if</span> (sign(d.x)&lt;<span class="number">0</span>||(sign(d.x)==<span class="number">0</span>&amp;&amp;sign(d.y)&lt;<span class="number">0</span>)) d=d*(<span class="number">-1</span>);</span><br><span class="line">    point whereU,whereD;</span><br><span class="line">    <span class="keyword">if</span> (sign(d.x)==<span class="number">0</span>) <span class="keyword">return</span> mp(U[<span class="number">0</span>],U[U.size()<span class="number">-1</span>]);</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>,r=U.size()<span class="number">-1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l&lt;r)&#123;<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; <span class="keyword">if</span> (sign(cross(U[mid+<span class="number">1</span>]-U[mid],d))&lt;=<span class="number">0</span>) l=mid+<span class="number">1</span>,ans=mid+<span class="number">1</span>; <span class="keyword">else</span> r=mid;&#125;</span><br><span class="line">    whereU=U[ans]; l=<span class="number">0</span>,r=D.size()<span class="number">-1</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l&lt;r)&#123;<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; <span class="keyword">if</span> (sign(cross(D[mid+<span class="number">1</span>]-D[mid],d))&gt;=<span class="number">0</span>) l=mid+<span class="number">1</span>,ans=mid+<span class="number">1</span>; <span class="keyword">else</span> r=mid;&#125;</span><br><span class="line">    whereD=D[ans]; <span class="keyword">return</span> mp(whereU,whereD);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 先检查 contain, 逆时针给出</span></span><br><span class="line">pair&lt;point,point&gt; getTangentCoP(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;point&gt;&amp;U,<span class="keyword">const</span> <span class="built_in">vector</span>&lt;point&gt;&amp;D,point k)&#123;</span><br><span class="line">    db lx=U[<span class="number">0</span>].x,rx=U[U.size()<span class="number">-1</span>].x;</span><br><span class="line">    <span class="keyword">if</span> (k.x&lt;lx)&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=U.size()<span class="number">-1</span>,ans=U.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r)&#123;<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; <span class="keyword">if</span> (clockwise(k,U[mid],U[mid+<span class="number">1</span>])==<span class="number">1</span>) l=mid+<span class="number">1</span>; <span class="keyword">else</span> ans=mid,r=mid;&#125;</span><br><span class="line">        point w1=U[ans]; l=<span class="number">0</span>,r=D.size()<span class="number">-1</span>,ans=D.size()<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r)&#123;<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; <span class="keyword">if</span> (clockwise(k,D[mid],D[mid+<span class="number">1</span>])==<span class="number">-1</span>) l=mid+<span class="number">1</span>; <span class="keyword">else</span> ans=mid,r=mid;&#125;</span><br><span class="line">        point w2=D[ans]; <span class="keyword">return</span> mp(w1,w2);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (k.x&gt;rx)&#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=U.size(),ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r)&#123;<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; <span class="keyword">if</span> (clockwise(k,U[mid],U[mid<span class="number">-1</span>])==<span class="number">-1</span>) r=mid; <span class="keyword">else</span> ans=mid,l=mid+<span class="number">1</span>;&#125;</span><br><span class="line">        point w1=U[ans]; l=<span class="number">1</span>,r=D.size(),ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l&lt;r)&#123;<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; <span class="keyword">if</span> (clockwise(k,D[mid],D[mid<span class="number">-1</span>])==<span class="number">1</span>) r=mid; <span class="keyword">else</span> ans=mid,l=mid+<span class="number">1</span>;&#125;</span><br><span class="line">        point w2=D[ans]; <span class="keyword">return</span> mp(w2,w1);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> where1=lower_bound(U.begin(),U.end(),(point)&#123;k.x,<span class="number">-1e100</span>&#125;)-U.begin();</span><br><span class="line">        <span class="keyword">int</span> where2=lower_bound(D.begin(),D.end(),(point)&#123;k.x,<span class="number">-1e100</span>&#125;)-D.begin();</span><br><span class="line">        <span class="keyword">if</span> ((k.x==lx&amp;&amp;k.y&gt;U[<span class="number">0</span>].y)||(where1&amp;&amp;clockwise(U[where1<span class="number">-1</span>],U[where1],k)==<span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">int</span> l=<span class="number">1</span>,r=where1+<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;r)&#123;<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; <span class="keyword">if</span> (clockwise(k,U[mid],U[mid<span class="number">-1</span>])==<span class="number">1</span>) ans=mid,l=mid+<span class="number">1</span>; <span class="keyword">else</span> r=mid;&#125;</span><br><span class="line">            point w1=U[ans]; l=where1,r=U.size()<span class="number">-1</span>,ans=U.size()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;r)&#123;<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; <span class="keyword">if</span> (clockwise(k,U[mid],U[mid+<span class="number">1</span>])==<span class="number">1</span>) l=mid+<span class="number">1</span>; <span class="keyword">else</span> ans=mid,r=mid;&#125;</span><br><span class="line">            point w2=U[ans]; <span class="keyword">return</span> mp(w2,w1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> l=<span class="number">1</span>,r=where2+<span class="number">1</span>,ans=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;r)&#123;<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; <span class="keyword">if</span> (clockwise(k,D[mid],D[mid<span class="number">-1</span>])==<span class="number">-1</span>) ans=mid,l=mid+<span class="number">1</span>; <span class="keyword">else</span> r=mid;&#125;</span><br><span class="line">            point w1=D[ans]; l=where2,r=D.size()<span class="number">-1</span>,ans=D.size()<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l&lt;r)&#123;<span class="keyword">int</span> mid=l+r&gt;&gt;<span class="number">1</span>; <span class="keyword">if</span> (clockwise(k,D[mid],D[mid+<span class="number">1</span>])==<span class="number">-1</span>) l=mid+<span class="number">1</span>; <span class="keyword">else</span> ans=mid,r=mid;&#125;</span><br><span class="line">            point w2=D[ans]; <span class="keyword">return</span> mp(w1,w2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P3</span>&#123;</span></span><br><span class="line">    db x,y,z;</span><br><span class="line">    P3 <span class="keyword">operator</span> + (P3 k1)&#123;<span class="keyword">return</span> (P3)&#123;x+k1.x,y+k1.y,z+k1.z&#125;;&#125;</span><br><span class="line">    P3 <span class="keyword">operator</span> - (P3 k1)&#123;<span class="keyword">return</span> (P3)&#123;x-k1.x,y-k1.y,z-k1.z&#125;;&#125;</span><br><span class="line">    P3 <span class="keyword">operator</span> * (db k1)&#123;<span class="keyword">return</span> (P3)&#123;x*k1,y*k1,z*k1&#125;;&#125;</span><br><span class="line">    P3 <span class="keyword">operator</span> / (db k1)&#123;<span class="keyword">return</span> (P3)&#123;x/k1,y/k1,z/k1&#125;;&#125;</span><br><span class="line">    <span class="function">db <span class="title">abs2</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> x*x+y*y+z*z;&#125;</span><br><span class="line">    <span class="function">db <span class="title">abs</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="built_in">sqrt</span>(x*x+y*y+z*z);&#125;</span><br><span class="line">    <span class="function">P3 <span class="title">unit</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> (*<span class="keyword">this</span>)/<span class="built_in">abs</span>();&#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> P3 k1) <span class="keyword">const</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cmp(x,k1.x)!=<span class="number">0</span>) <span class="keyword">return</span> x&lt;k1.x;</span><br><span class="line">        <span class="keyword">if</span> (cmp(y,k1.y)!=<span class="number">0</span>) <span class="keyword">return</span> y&lt;k1.y;</span><br><span class="line">        <span class="keyword">return</span> cmp(z,k1.z)==<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> P3 k1)&#123;</span><br><span class="line">        <span class="keyword">return</span> cmp(x,k1.x)==<span class="number">0</span>&amp;&amp;cmp(y,k1.y)==<span class="number">0</span>&amp;&amp;cmp(z,k1.z)==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> k1,k2,k3; <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>,&amp;k1,&amp;k2,&amp;k3);</span><br><span class="line">        x=k1; y=k2; z=k3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">P3 <span class="title">cross</span><span class="params">(P3 k1,P3 k2)</span></span>&#123;<span class="keyword">return</span> (P3)&#123;k1.y*k2.z-k1.z*k2.y,k1.z*k2.x-k1.x*k2.z,k1.x*k2.y-k1.y*k2.x&#125;;&#125;</span><br><span class="line"><span class="function">db <span class="title">dot</span><span class="params">(P3 k1,P3 k2)</span></span>&#123;<span class="keyword">return</span> k1.x*k2.x+k1.y*k2.y+k1.z*k2.z;&#125;</span><br><span class="line"><span class="comment">//p=(3,4,5),l=(13,19,21),theta=85 ans=(2.83,4.62,1.77)</span></span><br><span class="line"><span class="function">P3 <span class="title">turn3D</span><span class="params">(db k1,P3 l,P3 p)</span></span>&#123;</span><br><span class="line">    l=l.unit(); P3 ans; db c=<span class="built_in">cos</span>(k1),s=<span class="built_in">sin</span>(k1);</span><br><span class="line">    ans.x=p.x*(l.x*l.x*(<span class="number">1</span>-c)+c)+p.y*(l.x*l.y*(<span class="number">1</span>-c)-l.z*s)+p.z*(l.x*l.z*(<span class="number">1</span>-c)+l.y*s);</span><br><span class="line">    ans.y=p.x*(l.x*l.y*(<span class="number">1</span>-c)+l.z*s)+p.y*(l.y*l.y*(<span class="number">1</span>-c)+c)+p.z*(l.y*l.z*(<span class="number">1</span>-c)-l.x*s);</span><br><span class="line">    ans.z=p.x*(l.x*l.z*(<span class="number">1</span>-c)-l.y*s)+p.y*(l.y*l.z*(<span class="number">1</span>-c)+l.x*s)+p.z*(l.x*l.x*(<span class="number">1</span>-c)+c);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;P3&gt; VP;</span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;VP&gt; VVP;</span><br><span class="line"><span class="function">db <span class="title">Acos</span><span class="params">(db x)</span></span>&#123;<span class="keyword">return</span> <span class="built_in">acos</span>(max(-(db)<span class="number">1</span>,min(x,(db)<span class="number">1</span>)));&#125;</span><br><span class="line"><span class="comment">// 球面距离 , 圆心原点 , 半径 1</span></span><br><span class="line"><span class="function">db <span class="title">Odist</span><span class="params">(P3 a,P3 b)</span></span>&#123;db r=Acos(dot(a,b)); <span class="keyword">return</span> r;&#125;</span><br><span class="line">db r; P3 rnd;</span><br><span class="line"><span class="built_in">vector</span>&lt;db&gt; solve(db a,db b,db c)&#123;</span><br><span class="line">    db r=<span class="built_in">sqrt</span>(a*a+b*b),th=<span class="built_in">atan2</span>(b,a);</span><br><span class="line">    <span class="keyword">if</span> (cmp(c,-r)==<span class="number">-1</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cmp(r,c)&lt;=<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        db tr=pi-Acos(c/r); <span class="keyword">return</span> &#123;th+pi-tr,th+pi+tr&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;db&gt; jiao(P3 a,P3 b)&#123;</span><br><span class="line">    <span class="comment">// dot(rd+x*cos(t)+y*sin(t),b) &gt;= cos(r)</span></span><br><span class="line">    <span class="keyword">if</span> (cmp(Odist(a,b),<span class="number">2</span>*r)&gt;<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    P3 rd=a*<span class="built_in">cos</span>(r),z=a.unit(),y=cross(z,rnd).unit(),x=cross(y,z).unit();</span><br><span class="line">    <span class="built_in">vector</span>&lt;db&gt; ret = solve(-(dot(x,b)*<span class="built_in">sin</span>(r)),-(dot(y,b)*<span class="built_in">sin</span>(r)),-(<span class="built_in">cos</span>(r)-dot(rd,b))); </span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">norm</span><span class="params">(db x,db l=<span class="number">0</span>,db r=<span class="number">2</span>*pi)</span></span>&#123; <span class="comment">// change x into [l,r)</span></span><br><span class="line">    <span class="keyword">while</span> (cmp(x,l)==<span class="number">-1</span>) x+=(r-l); <span class="keyword">while</span> (cmp(x,r)&gt;=<span class="number">0</span>) x-=(r-l);</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">disLP</span><span class="params">(P3 k1,P3 k2,P3 q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (cross(k2-k1,q-k1)).<span class="built_in">abs</span>()/(k2-k1).<span class="built_in">abs</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">disLL</span><span class="params">(P3 k1,P3 k2,P3 k3,P3 k4)</span></span>&#123;</span><br><span class="line">    P3 dir=cross(k2-k1,k4-k3); <span class="keyword">if</span> (sign(dir.<span class="built_in">abs</span>())==<span class="number">0</span>) <span class="keyword">return</span> disLP(k1,k2,k3);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(dot(dir.unit(),k1-k2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">VP <span class="title">getFL</span><span class="params">(P3 p,P3 dir,P3 k1,P3 k2)</span></span>&#123;</span><br><span class="line">    db a=dot(k2-p,dir),b=dot(k1-p,dir),d=a-b;</span><br><span class="line">    <span class="keyword">if</span> (sign(<span class="built_in">fabs</span>(d))==<span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;(k1*a-k2*b)/d&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">VP <span class="title">getFF</span><span class="params">(P3 p1,P3 dir1,P3 p2,P3 dir2)</span></span>&#123;<span class="comment">// 返回一条线</span></span><br><span class="line">    P3 e=cross(dir1,dir2),v=cross(dir1,e);</span><br><span class="line">    db d=dot(dir2,v); <span class="keyword">if</span> (sign(<span class="built_in">abs</span>(d))==<span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    P3 q=p1+v*dot(dir2,p2-p1)/d; <span class="keyword">return</span> &#123;q,q+e&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3D Covex Hull Template</span></span><br><span class="line"><span class="function">db <span class="title">getV</span><span class="params">(P3 k1,P3 k2,P3 k3,P3 k4)</span></span>&#123; <span class="comment">// get the Volume</span></span><br><span class="line">    <span class="keyword">return</span> dot(cross(k2-k1,k3-k1),k4-k1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">rand_db</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="number">1.0</span>*rand()/RAND_MAX;&#125;</span><br><span class="line"><span class="function">VP <span class="title">convexHull2D</span><span class="params">(VP A,P3 dir)</span></span>&#123;</span><br><span class="line">    P3 x=&#123;(db)rand(),(db)rand(),(db)rand()&#125;; x=x.unit();</span><br><span class="line">    x=cross(x,dir).unit(); P3 y=cross(x,dir).unit();</span><br><span class="line">    P3 vec=dir.unit()*dot(A[<span class="number">0</span>],dir);</span><br><span class="line">    <span class="built_in">vector</span>&lt;point&gt;B;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;A.size();i++) B.push_back((point)&#123;dot(A[i],x),dot(A[i],y)&#125;);</span><br><span class="line">    B=ConvexHull(B); A.clear();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;B.size();i++) A.push_back(x*B[i].x+y*B[i].y+vec);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> CH3&#123;</span><br><span class="line">    VVP ret; <span class="built_in">set</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt;e;</span><br><span class="line">    <span class="keyword">int</span> n; VP p,q;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">wrap</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.find(&#123;a,b&#125;)==e.end())&#123;</span><br><span class="line">            <span class="keyword">int</span> c=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">if</span> (i!=a&amp;&amp;i!=b)&#123;</span><br><span class="line">                <span class="keyword">if</span> (c==<span class="number">-1</span>||sign(getV(q[c],q[a],q[b],q[i]))&gt;<span class="number">0</span>) c=i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (c!=<span class="number">-1</span>)&#123;</span><br><span class="line">                ret.push_back(&#123;p[a],p[b],p[c]&#125;);</span><br><span class="line">                e.insert(&#123;a,b&#125;); e.insert(&#123;b,c&#125;); e.insert(&#123;c,a&#125;);</span><br><span class="line">                wrap(c,b); wrap(a,c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">VVP <span class="title">ConvexHull3D</span><span class="params">(VP _p)</span></span>&#123;</span><br><span class="line">        p=q=_p; n=p.size();</span><br><span class="line">        ret.clear(); e.clear();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;i:q) i=i+(P3)&#123;rand_db()*<span class="number">1e-4</span>,rand_db()*<span class="number">1e-4</span>,rand_db()*<span class="number">1e-4</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++) <span class="keyword">if</span> (q[i].x&lt;q[<span class="number">0</span>].x) swap(p[<span class="number">0</span>],p[i]),swap(q[<span class="number">0</span>],q[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++) <span class="keyword">if</span> ((q[i].x-q[<span class="number">0</span>].x)*(q[<span class="number">1</span>].y-q[<span class="number">0</span>].y)&gt;(q[i].y-q[<span class="number">0</span>].y)*(q[<span class="number">1</span>].x-q[<span class="number">0</span>].x)) swap(q[<span class="number">1</span>],q[i]),swap(p[<span class="number">1</span>],p[i]);</span><br><span class="line">        wrap(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">VVP <span class="title">reduceCH</span><span class="params">(VVP A)</span></span>&#123;</span><br><span class="line">    VVP ret; <span class="built_in">map</span>&lt;P3,VP&gt; M;</span><br><span class="line">    <span class="keyword">for</span> (VP nowF:A)&#123;</span><br><span class="line">        P3 dir=cross(nowF[<span class="number">1</span>]-nowF[<span class="number">0</span>],nowF[<span class="number">2</span>]-nowF[<span class="number">0</span>]).unit();</span><br><span class="line">        <span class="keyword">for</span> (P3 k1:nowF) M[dir].pb(k1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (pair&lt;P3,VP&gt; nowF:M) ret.pb(convexHull2D(nowF.se,nowF.fi));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  把一个面变成 ( 点 , 法向量 ) 的形式</span></span><br><span class="line">pair&lt;P3,P3&gt; getF(VP F)&#123;</span><br><span class="line">    <span class="keyword">return</span> mp(F[<span class="number">0</span>],cross(F[<span class="number">1</span>]-F[<span class="number">0</span>],F[<span class="number">2</span>]-F[<span class="number">0</span>]).unit());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3D Cut 保留 dot(dir,x-p)&gt;=0 的部分</span></span><br><span class="line"><span class="function">VVP <span class="title">ConvexCut3D</span><span class="params">(VVP A,P3 p,P3 dir)</span></span>&#123;</span><br><span class="line">    VVP ret; VP sec;</span><br><span class="line">    <span class="keyword">for</span> (VP nowF: A)&#123;</span><br><span class="line">        <span class="keyword">int</span> n=nowF.size(); VP ans; <span class="keyword">int</span> dif=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> d1=sign(dot(dir,nowF[i]-p));</span><br><span class="line">            <span class="keyword">int</span> d2=sign(dot(dir,nowF[(i+<span class="number">1</span>)%n]-p));</span><br><span class="line">            <span class="keyword">if</span> (d1&gt;=<span class="number">0</span>) ans.pb(nowF[i]);</span><br><span class="line">            <span class="keyword">if</span> (d1*d2&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                P3 q=getFL(p,dir,nowF[i],nowF[(i+<span class="number">1</span>)%n])[<span class="number">0</span>];</span><br><span class="line">                ans.push_back(q); sec.push_back(q);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (d1==<span class="number">0</span>) sec.push_back(nowF[i]); <span class="keyword">else</span> dif=<span class="number">1</span>;</span><br><span class="line">            dif|=(sign(dot(dir,cross(nowF[(i+<span class="number">1</span>)%n]-nowF[i],nowF[(i+<span class="number">1</span>)%n]-nowF[i])))==<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ans.size()&gt;<span class="number">0</span>&amp;&amp;dif) ret.push_back(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sec.size()&gt;<span class="number">0</span>) ret.push_back(convexHull2D(sec,dir));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">db <span class="title">vol</span><span class="params">(VVP A)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (A.size()==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; P3 p=A[<span class="number">0</span>][<span class="number">0</span>]; db ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (VP nowF:A)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;nowF.size();i++)</span><br><span class="line">            ans+=<span class="built_in">abs</span>(getV(p,nowF[<span class="number">0</span>],nowF[i<span class="number">-1</span>],nowF[i]));</span><br><span class="line">    <span class="keyword">return</span> ans/<span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">VVP <span class="title">init</span><span class="params">(db INF)</span> </span>&#123;</span><br><span class="line">    VVP pss(6,VP(4));</span><br><span class="line">    pss[<span class="number">0</span>][<span class="number">0</span>] = pss[<span class="number">1</span>][<span class="number">0</span>] = pss[<span class="number">2</span>][<span class="number">0</span>] = &#123;-INF, -INF, -INF&#125;;</span><br><span class="line">    pss[<span class="number">0</span>][<span class="number">3</span>] = pss[<span class="number">1</span>][<span class="number">1</span>] = pss[<span class="number">5</span>][<span class="number">2</span>] = &#123;-INF, -INF, INF&#125;;</span><br><span class="line">    pss[<span class="number">0</span>][<span class="number">1</span>] = pss[<span class="number">2</span>][<span class="number">3</span>] = pss[<span class="number">4</span>][<span class="number">2</span>] = &#123;-INF, INF, -INF&#125;;</span><br><span class="line">    pss[<span class="number">0</span>][<span class="number">2</span>] = pss[<span class="number">5</span>][<span class="number">3</span>] = pss[<span class="number">4</span>][<span class="number">1</span>] = &#123;-INF, INF, INF&#125;;</span><br><span class="line">    pss[<span class="number">1</span>][<span class="number">3</span>] = pss[<span class="number">2</span>][<span class="number">1</span>] = pss[<span class="number">3</span>][<span class="number">2</span>] = &#123;INF, -INF, -INF&#125;;</span><br><span class="line">    pss[<span class="number">1</span>][<span class="number">2</span>] = pss[<span class="number">5</span>][<span class="number">1</span>] = pss[<span class="number">3</span>][<span class="number">3</span>] = &#123;INF, -INF, INF&#125;;</span><br><span class="line">    pss[<span class="number">2</span>][<span class="number">2</span>] = pss[<span class="number">4</span>][<span class="number">3</span>] = pss[<span class="number">3</span>][<span class="number">1</span>] = &#123;INF, INF, -INF&#125;;</span><br><span class="line">    pss[<span class="number">5</span>][<span class="number">0</span>] = pss[<span class="number">4</span>][<span class="number">0</span>] = pss[<span class="number">3</span>][<span class="number">0</span>] = &#123;INF, INF, INF&#125;;</span><br><span class="line">    <span class="keyword">return</span> pss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;h2 id=&quot;Input&quot;&gt;&lt;a href=&quot;#Input&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="计算几何" scheme="http://aoudad.cn/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>线段树模板</title>
    <link href="http://aoudad.cn/2018/12/28/%E7%BA%BF%E6%AE%B5%E6%A0%91%E6%A8%A1%E6%9D%BF/"/>
    <id>http://aoudad.cn/2018/12/28/线段树模板/</id>
    <published>2018-12-28T13:13:24.000Z</published>
    <updated>2018-12-28T13:14:13.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>线段树还不是很熟练，拿个Amori的线段树板子</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">ll ans[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line">ll tag[maxn*<span class="number">4</span>];</span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[o]=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> lson=o&lt;&lt;<span class="number">1</span>,rson=lson|<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(lson,l,m);</span><br><span class="line">    build(rson,m+<span class="number">1</span>,r);</span><br><span class="line">    ans[o]=sum(ans[lson], ans[rson]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> k)</span><span class="comment">//区间修改:将[l,r]区间每个数都加上k</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lson=o&lt;&lt;<span class="number">1</span>,rson=lson|<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;qr&gt;=r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[o]+=k*(r-l+<span class="number">1</span>)</span><br><span class="line">        tag[o]+=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tag[o])</span><br><span class="line">    &#123;</span><br><span class="line">        tag[lson]+=tag[o];</span><br><span class="line">        tag[rson]+=tag[o];</span><br><span class="line">        ans[lson]+=tag[o]*(m-l+<span class="number">1</span>)</span><br><span class="line">        ans[rson]+=tag[o]*(r-m);</span><br><span class="line">        tag[o]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(qr&lt;=m)</span><br><span class="line">        update(lson,l,m,ql,qr,k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ql&gt;m)</span><br><span class="line">        update(rson,m+<span class="number">1</span>,r,ql,qr,k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        update(lson,l,m,ql,qr,k);</span><br><span class="line">        update(rson,m+<span class="number">1</span>,r,ql,qr,k);</span><br><span class="line">    &#125;</span><br><span class="line">    ans[o]=ans[lson]+ans[rson];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_p</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//单点修改:将a[x]加上y</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(L==R)</span><br><span class="line">&#123;</span><br><span class="line">          ans[o]+=y</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">int</span> m=(l+r)/<span class="number">2</span>,lson=o&lt;&lt;<span class="number">1</span>,rson=lson|<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(x&lt;=m)update(lson,l,m,x,y);</span><br><span class="line">     <span class="keyword">else</span> update(rson,m+<span class="number">1</span>,r,x,y);</span><br><span class="line">ans[o]=ans[lson]+ans[rson];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> o,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span><span class="comment">//区间查询</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lson=o&lt;&lt;<span class="number">1</span>,rson=lson|<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> m=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql&lt;=l&amp;&amp;qr&gt;=r)</span><br><span class="line">        <span class="keyword">return</span> ans[o];</span><br><span class="line">    <span class="keyword">if</span>(tag[o])</span><br><span class="line">    &#123;</span><br><span class="line">        tag[lson]+=tag[o];</span><br><span class="line">        tag[rson]+=tag[o];</span><br><span class="line">        ans[lson]+=tag[o]*(m-l+<span class="number">1</span>)</span><br><span class="line">        ans[rson]+=tag[o]*(r-m);</span><br><span class="line">        tag[o]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(qr&lt;=m)</span><br><span class="line">        <span class="keyword">return</span> query(lson,l,m,ql,qr);</span><br><span class="line">    <span class="keyword">if</span>(ql&gt;m)</span><br><span class="line">        <span class="keyword">return</span> query(rson,m+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">    <span class="keyword">return</span> query(lson,l,m,ql,qr)+query(rson,m+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;线段树还不是很熟练，拿个Amori的线段树板子&lt;/p&gt;
&lt;h2 id=&quot;Input&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="线段树" scheme="http://aoudad.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces1091Div2D-The Fair Nut and the Best Path</title>
    <link href="http://aoudad.cn/2018/12/11/Codeforces1091Div2D/"/>
    <id>http://aoudad.cn/2018/12/11/Codeforces1091Div2D/</id>
    <published>2018-12-10T20:11:10.000Z</published>
    <updated>2018-12-10T20:30:36.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题意描述"><a href="#题意描述" class="headerlink" title="题意描述"></a><strong>题意描述</strong></h2><p>outputstandard output<br>The Fair Nut is going to travel to the Tree Country, in which there are n cities. Most of the land of this country is covered by forest. Furthermore, the local road system forms a tree (connected graph without cycles). Nut wants to rent a car in the city u and go by a simple path to city v. He hasn’t determined his way, so it’s time to do it.</p><p>A filling station is located in every city. Because of strange law, Nut can buy only wi liters of gasoline in the i-th city. We can assume, that he has infinite money. Each road has a length, and as soon as Nut drives through this road, the amount of gasoline decreases by length. Of course, Nut can’t choose a path, which consists of roads, where he runs out of gasoline. He can buy gasoline in every visited city, even in the first and the last.</p><p>A path can consist of only one vertex.</p><p>He also wants to find the maximum amount of gasoline that he can have at the end of the path. Help him: count it.</p><h2 id="Input"><a href="#Input" class="headerlink" title="Input"></a><strong>Input</strong></h2><p>The first line contains a single integer n (1≤n≤3⋅105) — the number of cities.<br>The second line contains n integers w1,w2,…,wn (0≤wi≤109) — the maximum amounts of liters of gasoline that Nut can buy in cities.<br>Each of the next n−1 lines describes road and contains three integers u, v, c (1≤u,v≤n, 1≤c≤109, u≠v), where u and v — cities that are connected by this road and c — its length.<br>It is guaranteed that graph of road connectivity is a tree.</p><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a><strong>Output</strong></h2><p>Print one number — the maximum amount of gasoline that he can have at the end of the path.</p><h2 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a><strong>Sample Input</strong></h2><p>3<br>1 3 3<br>1 2 2<br>1 3 2</p><p>5<br>6 3 2 5 0<br>1 2 10<br>2 3 3<br>2 4 1<br>1 5 1</p><h2 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a><strong>Sample Output</strong></h2><p>3</p><p>7</p><h2 id="题意："><a href="#题意：" class="headerlink" title="题意："></a><strong>题意：</strong></h2><p>给一棵n个节点的树， 每个节点上都有一个权值$w_i$，每条边上有一个花费$c_i$，任意选择起点u和终点v(u和v可以是同一个节点)，定义价值$x(u, v)$为从起点u到终点v的路径上所有的节点的权值之和减去所有的边的花费最大，输出这个最大值，其中，到达任任何一个节点的前一瞬间，x不能是负数。输出最大的x。</p><h2 id="思路："><a href="#思路：" class="headerlink" title="思路："></a><strong>思路：</strong></h2><p>树上dp。以节点1为起点dfs，$dp[u]=w[u]+max(0, max(dp[v]-c[u, v]))$,其中dp[i]表示，额，好像没有特别明确的含义，大概是表示经过i节点的最大收益吧，显然不一定非要从叶子节点一直push到根节点，也可以中间节点的某两条子树路径是答案，因此需要拿到(dp[v]-c[u, v])中的最大的两个值，这里可以O(n)做，但是由于排序O(nlogn)是没有卡的，所以直接排序也是可以的，但是我在比赛中用了很蠢的O(n^2)，不知道自己是怎么想的，然后愉快的fst了，掉分哭唧唧。然后就xjb更新答案就行了。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">const</span> ll maxn = <span class="number">5e5</span>+<span class="number">7</span>;</span><br><span class="line">ll a[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pair&lt;ll, ll&gt; &gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line">ll ans = <span class="number">-1</span>;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> u, ll c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll res = a[u];</span><br><span class="line">    <span class="built_in">vector</span>&lt;ll&gt; tmp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;G[u].size();++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(G[u][i].first==f)<span class="keyword">continue</span>;</span><br><span class="line">        ll t = dfs(u, G[u][i].first, G[u][i].second);</span><br><span class="line">        res = max(res, t+a[u]);</span><br><span class="line">        tmp.push_back(t);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(tmp.begin(), tmp.end(), greater&lt;ll&gt;());</span><br><span class="line">    tmp.push_back(<span class="number">0</span>);</span><br><span class="line">    tmp.push_back(<span class="number">0</span>);</span><br><span class="line">    ans = max(a[u]+tmp[<span class="number">0</span>]+tmp[<span class="number">1</span>], ans);</span><br><span class="line">    ans = max(ans, res);</span><br><span class="line">    <span class="keyword">return</span> res-c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ll u, v, c;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; c;</span><br><span class="line">        G[u].push_back(make_pair(v, c));</span><br><span class="line">        G[v].push_back(make_pair(u, c));</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题意描述&quot;&gt;&lt;a href=&quot;#题意描述&quot; class=&quot;headerlink&quot; title=&quot;题意描述&quot;&gt;&lt;/a&gt;&lt;strong&gt;题意描述&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;outputstandard output&lt;br&gt;The Fair Nut is goin
      
    
    </summary>
    
    
      <category term="树上DP" scheme="http://aoudad.cn/tags/%E6%A0%91%E4%B8%8ADP/"/>
    
  </entry>
  
</feed>
